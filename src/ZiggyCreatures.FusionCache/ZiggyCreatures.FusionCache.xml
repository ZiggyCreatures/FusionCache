<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ZiggyCreatures.FusionCache</name>
    </assembly>
    <members>
        <member name="T:ZiggyCreatures.Caching.Fusion.Backplane.BackplaneConnectionInfo">
            <summary>
            A struct containing information about a backplane connection or re-connection.
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Backplane.BackplaneConnectionInfo.#ctor(System.Boolean)">
            <summary>
            Creates a new <see cref="T:ZiggyCreatures.Caching.Fusion.Backplane.BackplaneConnectionInfo"/> instance.
            </summary>
            <param name="isReconnection"></param>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.Backplane.BackplaneConnectionInfo.IsReconnection">
            <summary>
            If set to <see langword="true"/>, the connection is a re-connection.
            </summary>
        </member>
        <member name="T:ZiggyCreatures.Caching.Fusion.Backplane.BackplaneMessage">
            <summary>
            Represents a message on a backplane.
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Backplane.BackplaneMessage.#ctor">
            <summary>
            Creates a new instance of a backplane message.
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Backplane.BackplaneMessage.#ctor(System.Nullable{System.Int64})">
            <summary>
            Creates a new instance of a backplane message.
            </summary>
            <param name="timestamp">The timestamp, or <see langword="null"/> to set it automatically to the current timestamp.</param>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.Backplane.BackplaneMessage.SourceId">
            <summary>
            The InstanceId of the source cache.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.Backplane.BackplaneMessage.Timestamp">
            <summary>
            The timestamp (in ticks) at a message has been created.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.Backplane.BackplaneMessage.Action">
            <summary>
            The action to broadcast to the backplane.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.Backplane.BackplaneMessage.CacheKey">
            <summary>
            The cache key related to the action, if any.
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Backplane.BackplaneMessage.IsValid">
            <summary>
            Checks if a message is valid.
            </summary>
            <returns><see langword="true"/> if it seems valid, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Backplane.BackplaneMessage.CreateForEntrySet(System.String,System.String,System.Nullable{System.Int64})">
            <summary>
            Creates a message for a single cache entry set operation (via either a Set() or a GetOrSet() method call).
            </summary>
            <param name="sourceId">The cache InstanceId of the source.</param>
            <param name="cacheKey">The cache key.</param>
            <param name="timestamp">The timestamp.</param>
            <returns>The message.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Backplane.BackplaneMessage.CreateForEntryRemove(System.String,System.String,System.Nullable{System.Int64})">
            <summary>
            Creates a message for a single cache entry remove (via a Remove() method call).
            </summary>
            <param name="sourceId">The cache InstanceId of the source.</param>
            <param name="cacheKey">The cache key.</param>
            <param name="timestamp">The timestamp.</param>
            <returns>The message.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Backplane.BackplaneMessage.CreateForEntryExpire(System.String,System.String,System.Nullable{System.Int64})">
            <summary>
            Creates a message for a single cache entry expire operation (via an Expire() method call).
            </summary>
            <param name="sourceId">The cache InstanceId of the source.</param>
            <param name="cacheKey">The cache key.</param>
            <param name="timestamp">The timestamp.</param>
            <returns>The message.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Backplane.BackplaneMessage.ToByteArray(ZiggyCreatures.Caching.Fusion.Backplane.BackplaneMessage)">
            <summary>
            Serializes a backplane message to a byte array.
            </summary>
            <param name="message">The backplane message to serialize.</param>
            <returns></returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Backplane.BackplaneMessage.FromByteArray(System.Byte[])">
            <summary>
            Deserializes a byte array into a backplane message.
            </summary>
            <param name="data">The byte array to deserialize.</param>
            <returns>An instance of a backplane message, or <see langword="null"/></returns>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="T:ZiggyCreatures.Caching.Fusion.Backplane.BackplaneMessageAction">
            <summary>
            The type of action for a backplane message.
            </summary>
        </member>
        <member name="F:ZiggyCreatures.Caching.Fusion.Backplane.BackplaneMessageAction.Unknown">
            <summary>
            Unknown action.
            </summary>
        </member>
        <member name="F:ZiggyCreatures.Caching.Fusion.Backplane.BackplaneMessageAction.EntrySet">
            <summary>
            A cache entry has been set (via either a Set() or a GetOrSet() method call).
            </summary>
        </member>
        <member name="F:ZiggyCreatures.Caching.Fusion.Backplane.BackplaneMessageAction.EntryRemove">
            <summary>
            A cache entry has been removed (via a Remove() method call).
            </summary>
        </member>
        <member name="F:ZiggyCreatures.Caching.Fusion.Backplane.BackplaneMessageAction.EntryExpire">
            <summary>
            A cache entry has been manually expired (via an Expire() method call).
            </summary>
        </member>
        <member name="T:ZiggyCreatures.Caching.Fusion.Backplane.BackplaneSubscriptionOptions">
            <summary>
            Represents the options available for subscribing to a backplane.
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Backplane.BackplaneSubscriptionOptions.#ctor(System.String,System.Action{ZiggyCreatures.Caching.Fusion.Backplane.BackplaneConnectionInfo},System.Action{ZiggyCreatures.Caching.Fusion.Backplane.BackplaneMessage})">
            <summary>
            Creates a new instance of a <see cref="T:ZiggyCreatures.Caching.Fusion.Backplane.BackplaneSubscriptionOptions"/>.
            </summary>
            <param name="channelName">The channel name to be used.</param>
            <param name="connectHandler">The backplane connection handler that will be used when there's a connection (or reconnection).</param>
            <param name="incomingMessageHandler">The backplane message handler that will be used to process incoming messages.</param>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Backplane.BackplaneSubscriptionOptions.#ctor(System.String,System.String,System.String,System.Action{ZiggyCreatures.Caching.Fusion.Backplane.BackplaneConnectionInfo},System.Action{ZiggyCreatures.Caching.Fusion.Backplane.BackplaneMessage})">
            <summary>
            Creates a new instance of a <see cref="T:ZiggyCreatures.Caching.Fusion.Backplane.BackplaneSubscriptionOptions"/>.
            </summary>
            <param name="cacheName">The cache name.</param>
            <param name="cacheInstanceId">The unique cache instance id.</param>
            <param name="channelName">The channel name to be used.</param>
            <param name="connectHandler">The backplane connection handler that will be used when there's a connection (or reconnection).</param>
            <param name="incomingMessageHandler">The backplane message handler that will be used to process incoming messages.</param>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.Backplane.BackplaneSubscriptionOptions.CacheName">
            <summary>
            The cache name.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.Backplane.BackplaneSubscriptionOptions.CacheInstanceId">
            <summary>
            The cache instance id.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.Backplane.BackplaneSubscriptionOptions.ChannelName">
            <summary>
            The channel name to be used.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.Backplane.BackplaneSubscriptionOptions.Handler">
            <summary>
            The backplane message handler that will be used to process incoming messages.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.Backplane.BackplaneSubscriptionOptions.ConnectHandler">
            <summary>
            The backplane connection handler that will be used when there's a connection (or reconnection).
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.Backplane.BackplaneSubscriptionOptions.IncomingMessageHandler">
            <summary>
            The backplane message handler that will be used to process incoming messages.
            </summary>
        </member>
        <member name="T:ZiggyCreatures.Caching.Fusion.Backplane.IFusionCacheBackplane">
            <summary>
            The core interface to create a FusionCache backplane.
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Backplane.IFusionCacheBackplane.Subscribe(ZiggyCreatures.Caching.Fusion.Backplane.BackplaneSubscriptionOptions)">
            <summary>
            Subscribe to receive messages from other nodes.
            </summary>
            <param name="options">The backplane subscription options.</param>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Backplane.IFusionCacheBackplane.Unsubscribe">
            <summary>
            Unsubscribe from receiving messages from other nodes.
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Backplane.IFusionCacheBackplane.PublishAsync(ZiggyCreatures.Caching.Fusion.Backplane.BackplaneMessage,ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions,System.Threading.CancellationToken)">
            <summary>
            Send a notification to the other connected nodes, if any.
            </summary>
            <param name="message">The message to send.</param>
            <param name="options">The options to use.</param>
            <param name="token">An optional <see cref="T:System.Threading.CancellationToken"/> to cancel the operation.</param>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Backplane.IFusionCacheBackplane.Publish(ZiggyCreatures.Caching.Fusion.Backplane.BackplaneMessage,ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions,System.Threading.CancellationToken)">
            <summary>
            Send a notification to the other connected nodes, if any.
            </summary>
            <param name="message">The message to send.</param>
            <param name="options">The options to use.</param>
            <param name="token">An optional <see cref="T:System.Threading.CancellationToken"/> to cancel the operation.</param>
        </member>
        <member name="T:ZiggyCreatures.Caching.Fusion.CacheKeyModifierMode">
            <summary>
            The mode in which a cache modifier should be used to produce a cache key.
            </summary>
        </member>
        <member name="F:ZiggyCreatures.Caching.Fusion.CacheKeyModifierMode.Prefix">
            <summary>
            The cache modifier will be prepended, plus a separator.
            </summary>
        </member>
        <member name="F:ZiggyCreatures.Caching.Fusion.CacheKeyModifierMode.Suffix">
            <summary>
            The cache modifier will be appended, plus a separator.
            </summary>
        </member>
        <member name="F:ZiggyCreatures.Caching.Fusion.CacheKeyModifierMode.None">
            <summary>
            The cache modifier will not be prepended.
            </summary>
        </member>
        <member name="T:ZiggyCreatures.Caching.Fusion.Events.FusionCacheAbstractEventsHub">
            <summary>
            An abstract class with base plumbing.
            </summary>
        </member>
        <member name="F:ZiggyCreatures.Caching.Fusion.Events.FusionCacheAbstractEventsHub._cache">
            <summary>
            The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCache"/> instance.
            </summary>
        </member>
        <member name="F:ZiggyCreatures.Caching.Fusion.Events.FusionCacheAbstractEventsHub._options">
            <summary>
            The <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheOptions"/> instance.
            </summary>
        </member>
        <member name="F:ZiggyCreatures.Caching.Fusion.Events.FusionCacheAbstractEventsHub._logger">
            <summary>
            The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> instance.
            </summary>
        </member>
        <member name="F:ZiggyCreatures.Caching.Fusion.Events.FusionCacheAbstractEventsHub._errorsLogLevel">
            <summary>
            The <see cref="T:Microsoft.Extensions.Logging.LogLevel"/> for errors during event handling.
            </summary>
        </member>
        <member name="F:ZiggyCreatures.Caching.Fusion.Events.FusionCacheAbstractEventsHub._syncExecution">
            <summary>
            The execution mode for event handlers.
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Events.FusionCacheAbstractEventsHub.#ctor(ZiggyCreatures.Caching.Fusion.IFusionCache,ZiggyCreatures.Caching.Fusion.FusionCacheOptions,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:ZiggyCreatures.Caching.Fusion.Events.FusionCacheAbstractEventsHub"/> class.
            </summary>
            <param name="cache">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCache"/> instance.</param>
            <param name="options">The <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheOptions"/> instance.</param>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> instance.</param>
        </member>
        <member name="T:ZiggyCreatures.Caching.Fusion.Events.FusionCacheBackplaneEventsHub">
            <summary>
            The events hub for events specific for the backplane.
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Events.FusionCacheBackplaneEventsHub.#ctor(ZiggyCreatures.Caching.Fusion.IFusionCache,ZiggyCreatures.Caching.Fusion.FusionCacheOptions,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:ZiggyCreatures.Caching.Fusion.Events.FusionCacheBackplaneEventsHub"/> class.
            </summary>
            <param name="cache">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCache"/> instance.</param>
            <param name="options">The <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheOptions"/> instance.</param>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> instance.</param>
        </member>
        <member name="E:ZiggyCreatures.Caching.Fusion.Events.FusionCacheBackplaneEventsHub.CircuitBreakerChange">
            <summary>
            The event for a state change in the circuit breaker.
            </summary>
        </member>
        <member name="E:ZiggyCreatures.Caching.Fusion.Events.FusionCacheBackplaneEventsHub.MessagePublished">
            <summary>
            The event for a sent backplane message.
            </summary>
        </member>
        <member name="E:ZiggyCreatures.Caching.Fusion.Events.FusionCacheBackplaneEventsHub.MessageReceived">
            <summary>
            The event for a received backplane message.
            </summary>
        </member>
        <member name="T:ZiggyCreatures.Caching.Fusion.Events.FusionCacheBackplaneMessageEventArgs">
            <summary>
            The specific <see cref="T:System.EventArgs"/> object for events related to backplane messages, either published or received.
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Events.FusionCacheBackplaneMessageEventArgs.#ctor(ZiggyCreatures.Caching.Fusion.Backplane.BackplaneMessage)">
            <summary>
            Initializes a new instance of the <see cref="T:ZiggyCreatures.Caching.Fusion.Events.FusionCacheBackplaneMessageEventArgs"/> class.
            </summary>
            <param name="message">The backplane message.</param>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.Events.FusionCacheBackplaneMessageEventArgs.Message">
            <summary>
            The backplane message.
            </summary>
        </member>
        <member name="T:ZiggyCreatures.Caching.Fusion.Events.FusionCacheCircuitBreakerChangeEventArgs">
            <summary>
            The specific <see cref="T:System.EventArgs"/> object for events related to opening/closing of a circuit breaker.
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Events.FusionCacheCircuitBreakerChangeEventArgs.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ZiggyCreatures.Caching.Fusion.Events.FusionCacheCircuitBreakerChangeEventArgs"/> class.
            </summary>
            <param name="isClosed">A flag that indicates if the circuit breaker has been opened or closed.</param>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.Events.FusionCacheCircuitBreakerChangeEventArgs.IsClosed">
            <summary>
            A flag that indicates if the circuit breaker has been opened or closed.
            </summary>
        </member>
        <member name="T:ZiggyCreatures.Caching.Fusion.Events.FusionCacheCommonEventsHub">
            <summary>
            A class with base events that are common to any cache level (general, memory or distributed)
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Events.FusionCacheCommonEventsHub.#ctor(ZiggyCreatures.Caching.Fusion.IFusionCache,ZiggyCreatures.Caching.Fusion.FusionCacheOptions,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:ZiggyCreatures.Caching.Fusion.Events.FusionCacheCommonEventsHub"/> class.
            </summary>
            <param name="cache">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCache"/> instance.</param>
            <param name="options">The <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheOptions"/> instance.</param>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> instance.</param>
        </member>
        <member name="E:ZiggyCreatures.Caching.Fusion.Events.FusionCacheCommonEventsHub.Hit">
            <summary>
            The event for a cache hit (either fresh or stale).
            </summary>
        </member>
        <member name="E:ZiggyCreatures.Caching.Fusion.Events.FusionCacheCommonEventsHub.Miss">
            <summary>
            The event for a cache miss.
            </summary>
        </member>
        <member name="E:ZiggyCreatures.Caching.Fusion.Events.FusionCacheCommonEventsHub.Set">
            <summary>
            The event for a cache set.
            </summary>
        </member>
        <member name="E:ZiggyCreatures.Caching.Fusion.Events.FusionCacheCommonEventsHub.Remove">
            <summary>
            The event for a cache remove.
            </summary>
        </member>
        <member name="T:ZiggyCreatures.Caching.Fusion.Events.FusionCacheDistributedEventsHub">
            <summary>
            The events hub for events specific for the distributed level.
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Events.FusionCacheDistributedEventsHub.#ctor(ZiggyCreatures.Caching.Fusion.IFusionCache,ZiggyCreatures.Caching.Fusion.FusionCacheOptions,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:ZiggyCreatures.Caching.Fusion.Events.FusionCacheDistributedEventsHub" /> class.
            </summary>
            <param name="cache">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCache" /> instance.</param>
            <param name="options">The <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheOptions" /> instance.</param>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger" /> instance.</param>
        </member>
        <member name="E:ZiggyCreatures.Caching.Fusion.Events.FusionCacheDistributedEventsHub.CircuitBreakerChange">
            <summary>
            The event for a state change in the circuit breaker.
            </summary>
        </member>
        <member name="E:ZiggyCreatures.Caching.Fusion.Events.FusionCacheDistributedEventsHub.SerializationError">
            <summary>
            The event for data serialization.
            </summary>
        </member>
        <member name="E:ZiggyCreatures.Caching.Fusion.Events.FusionCacheDistributedEventsHub.DeserializationError">
            <summary>
            The event for data deserialization.
            </summary>
        </member>
        <member name="T:ZiggyCreatures.Caching.Fusion.Events.FusionCacheEntryEventArgs">
            <summary>
            The specific <see cref="T:System.EventArgs"/> object for events related to cache entries (eg: with a cache key).
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Events.FusionCacheEntryEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ZiggyCreatures.Caching.Fusion.Events.FusionCacheEntryEventArgs"/> class.
            </summary>
            <param name="key">The cache key related to the event.</param>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.Events.FusionCacheEntryEventArgs.Key">
            <summary>
            The cache key related to the event.
            </summary>
        </member>
        <member name="T:ZiggyCreatures.Caching.Fusion.Events.FusionCacheEntryEvictionEventArgs">
            <summary>
            The specific <see cref="T:System.EventArgs"/> object for events related to cache entries' evictions.
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Events.FusionCacheEntryEvictionEventArgs.#ctor(System.String,Microsoft.Extensions.Caching.Memory.EvictionReason,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:ZiggyCreatures.Caching.Fusion.Events.FusionCacheEntryEvictionEventArgs"/> class.
            </summary>
            <param name="key">The cache key related to the event.</param>
            <param name="reason">The reason for the eviction.</param>
            <param name="value">The value being evicted from the cache.</param>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.Events.FusionCacheEntryEvictionEventArgs.Reason">
            <summary>
            The reason for the eviction.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.Events.FusionCacheEntryEvictionEventArgs.Value">
            <summary>
            The value being evicted from the cache.
            </summary>
        </member>
        <member name="T:ZiggyCreatures.Caching.Fusion.Events.FusionCacheEntryHitEventArgs">
            <summary>
            The specific <see cref="T:System.EventArgs"/> object for events related to cache entries' hits (eg: with a cache key and a stale flag).
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Events.FusionCacheEntryHitEventArgs.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ZiggyCreatures.Caching.Fusion.Events.FusionCacheEntryHitEventArgs" /> class.
            </summary>
            <param name="key">The cache key related to the event.</param>
            <param name="isStale">A flag that indicates if the cache hit was for a fresh or stale entry.</param>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.Events.FusionCacheEntryHitEventArgs.IsStale">
            <summary>
            A flag that indicates if the cache hit was for a fresh or stale entry.
            </summary>
        </member>
        <member name="T:ZiggyCreatures.Caching.Fusion.Events.FusionCacheEventsHub">
            <summary>
            The events hub for high-level events for a FusionCache instance, as a whole.
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Events.FusionCacheEventsHub.#ctor(ZiggyCreatures.Caching.Fusion.IFusionCache,ZiggyCreatures.Caching.Fusion.FusionCacheOptions,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:ZiggyCreatures.Caching.Fusion.Events.FusionCacheEventsHub" /> class.
            </summary>
            <param name="cache">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCache" /> instance.</param>
            <param name="options">The <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheOptions" /> instance.</param>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger" /> instance.</param>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.Events.FusionCacheEventsHub.Memory">
            <summary>
            The events hub for the memory level.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.Events.FusionCacheEventsHub.Distributed">
            <summary>
            The events hub for the distributed level.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.Events.FusionCacheEventsHub.Backplane">
            <summary>
            The events hub for the backplane.
            </summary>
        </member>
        <member name="E:ZiggyCreatures.Caching.Fusion.Events.FusionCacheEventsHub.FailSafeActivate">
            <summary>
            The event for a fail-safe activation.
            </summary>
        </member>
        <member name="E:ZiggyCreatures.Caching.Fusion.Events.FusionCacheEventsHub.FactorySyntheticTimeout">
            <summary>
            The event for a synthetic timeout during a factory execution.
            </summary>
        </member>
        <member name="E:ZiggyCreatures.Caching.Fusion.Events.FusionCacheEventsHub.FactoryError">
            <summary>
            The event for a generic error during a non-background factory execution (excluding synthetic timeouts, for which there is the specific <see cref="E:ZiggyCreatures.Caching.Fusion.Events.FusionCacheEventsHub.FactorySyntheticTimeout"/> event).
            </summary>
        </member>
        <member name="E:ZiggyCreatures.Caching.Fusion.Events.FusionCacheEventsHub.FactorySuccess">
            <summary>
            The event for when a non-background factory execution completes successfully, therefore automatically updating the corresponding cache entry.
            </summary>
        </member>
        <member name="E:ZiggyCreatures.Caching.Fusion.Events.FusionCacheEventsHub.BackgroundFactoryError">
            <summary>
            The event for a generic error during a factory background execution (a factory that hit a synthetic timeout and has been relegated to background execution).
            </summary>
        </member>
        <member name="E:ZiggyCreatures.Caching.Fusion.Events.FusionCacheEventsHub.BackgroundFactorySuccess">
            <summary>
            The event for when a factory background execution (a factory that hit a synthetic timeout and has been relegated to background execution) completes successfully, therefore automatically updating the corresponding cache entry.
            </summary>
        </member>
        <member name="E:ZiggyCreatures.Caching.Fusion.Events.FusionCacheEventsHub.EagerRefresh">
            <summary>
            The event for when a factory is being executed in advance, because a request came in during the eager refresh window (after the eager refresh threshold and before the expiration).
            </summary>
        </member>
        <member name="E:ZiggyCreatures.Caching.Fusion.Events.FusionCacheEventsHub.Expire">
            <summary>
            The event for a manual cache Expire() call.
            </summary>
        </member>
        <member name="T:ZiggyCreatures.Caching.Fusion.Events.FusionCacheMemoryEventsHub">
            <summary>
            The events hub for events specific for the memory level.
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Events.FusionCacheMemoryEventsHub.#ctor(ZiggyCreatures.Caching.Fusion.IFusionCache,ZiggyCreatures.Caching.Fusion.FusionCacheOptions,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:ZiggyCreatures.Caching.Fusion.Events.FusionCacheMemoryEventsHub" /> class.
            </summary>
            <param name="cache">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCache" /> instance.</param>
            <param name="options">The <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheOptions" /> instance.</param>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger" /> instance.</param>
        </member>
        <member name="E:ZiggyCreatures.Caching.Fusion.Events.FusionCacheMemoryEventsHub.Eviction">
            <summary>
            The event for a cache eviction.
            </summary>
        </member>
        <member name="E:ZiggyCreatures.Caching.Fusion.Events.FusionCacheMemoryEventsHub.Expire">
            <summary>
            The event for a manual cache Expire() call.
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Events.FusionCacheMemoryEventsHub.HasEvictionSubscribers">
            <summary>
            Check if the <see cref="E:ZiggyCreatures.Caching.Fusion.Events.FusionCacheMemoryEventsHub.Eviction"/> event has subscribers or not.
            </summary>
            <returns><see langword="true"/> if the <see cref="E:ZiggyCreatures.Caching.Fusion.Events.FusionCacheMemoryEventsHub.Eviction"/> event has subscribers, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:ZiggyCreatures.Caching.Fusion.FusionCache">
            <summary>
            The standard implementation of <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCache"/>.
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCache.#ctor(Microsoft.Extensions.Options.IOptions{ZiggyCreatures.Caching.Fusion.FusionCacheOptions},Microsoft.Extensions.Caching.Memory.IMemoryCache,Microsoft.Extensions.Logging.ILogger{ZiggyCreatures.Caching.Fusion.FusionCache},ZiggyCreatures.Caching.Fusion.Reactors.IFusionCacheReactor)">
            <summary>
            Creates a new <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCache"/> instance.
            </summary>
            <param name="optionsAccessor">The set of cache-wide options to use with this instance of <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCache"/>.</param>
            <param name="memoryCache">The <see cref="T:Microsoft.Extensions.Caching.Memory.IMemoryCache"/> instance to use. If null, one will be automatically created and managed.</param>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger`1"/> instance to use. If null, logging will be completely disabled.</param>
            <param name="reactor">The <see cref="T:ZiggyCreatures.Caching.Fusion.Reactors.IFusionCacheReactor"/> instance to use (advanced). If null, a standard one will be automatically created and managed.</param>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCache.#ctor(Microsoft.Extensions.Options.IOptions{ZiggyCreatures.Caching.Fusion.FusionCacheOptions},Microsoft.Extensions.Caching.Memory.IMemoryCache,Microsoft.Extensions.Logging.ILogger{ZiggyCreatures.Caching.Fusion.FusionCache},ZiggyCreatures.Caching.Fusion.Locking.IFusionCacheMemoryLocker)">
            <summary>
            Creates a new <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCache"/> instance.
            </summary>
            <param name="optionsAccessor">The set of cache-wide options to use with this instance of <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCache"/>.</param>
            <param name="memoryCache">The <see cref="T:Microsoft.Extensions.Caching.Memory.IMemoryCache"/> instance to use. If null, one will be automatically created and managed.</param>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger`1"/> instance to use. If null, logging will be completely disabled.</param>
            <param name="memoryLocker">The <see cref="T:ZiggyCreatures.Caching.Fusion.Locking.IFusionCacheMemoryLocker"/> instance to use. If <see langword="null"/>, a standard one will be automatically created and managed.</param>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCache.CacheName">
            <inheritdoc/>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCache.InstanceId">
            <inheritdoc/>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCache.DefaultEntryOptions">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCache.CreateEntryOptions(System.Action{ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions},System.Nullable{System.TimeSpan})">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCache.SetupDistributedCache(Microsoft.Extensions.Caching.Distributed.IDistributedCache,ZiggyCreatures.Caching.Fusion.Serialization.IFusionCacheSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCache.RemoveDistributedCache">
            <inheritdoc/>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCache.HasDistributedCache">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCache.SetupBackplane(ZiggyCreatures.Caching.Fusion.Backplane.IFusionCacheBackplane)">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCache.RemoveBackplane">
            <inheritdoc/>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCache.HasBackplane">
            <inheritdoc/>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCache.Events">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCache.AddPlugin(ZiggyCreatures.Caching.Fusion.Plugins.IFusionCachePlugin)">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCache.RemovePlugin(ZiggyCreatures.Caching.Fusion.Plugins.IFusionCachePlugin)">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCache.Dispose(System.Boolean)">
            <summary>
            Release all resources managed by FusionCache.
            </summary>
            <param name="disposing">Indicates if the disposing is happening.</param>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCache.Dispose">
            <summary>
            Release all resources managed by FusionCache.
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCache.GetOrSetAsync``1(System.String,System.Func{ZiggyCreatures.Caching.Fusion.FusionCacheFactoryExecutionContext{``0},System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},ZiggyCreatures.Caching.Fusion.MaybeValue{``0},ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCache.GetOrSetAsync``1(System.String,``0,ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCache.TryGetAsync``1(System.String,ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCache.GetOrDefaultAsync``1(System.String,``0,ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCache.SetAsync``1(System.String,``0,ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCache.RemoveAsync(System.String,ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCache.ExpireAsync(System.String,ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCache.GetOrSet``1(System.String,System.Func{ZiggyCreatures.Caching.Fusion.FusionCacheFactoryExecutionContext{``0},System.Threading.CancellationToken,``0},ZiggyCreatures.Caching.Fusion.MaybeValue{``0},ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCache.GetOrSet``1(System.String,``0,ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCache.TryGet``1(System.String,ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCache.GetOrDefault``1(System.String,``0,ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCache.Set``1(System.String,``0,ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCache.Remove(System.String,ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCache.Expire(System.String,ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:ZiggyCreatures.Caching.Fusion.FusionCacheBackplaneException">
            <summary>
            The generic exception that is thrown when a distributed cache error occurs: the InnerException contains the original exception.
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheBackplaneException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheBackplaneException"/> class.
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheBackplaneException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheBackplaneException"/> class with a specified error message.</summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheBackplaneException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheBackplaneException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheBackplaneException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheBackplaneException"/> class with serialized data.</summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:ZiggyCreatures.Caching.Fusion.FusionCacheBuilderExtMethods">
            <summary>
            A set of extension methods that add some commonly used setup actions to an instance of a <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder"/> object.
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheBuilderExtMethods.WithOptions(ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder,ZiggyCreatures.Caching.Fusion.FusionCacheOptions)">
            <summary>
            Specify a <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheOptions"/> instance to be used.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/DependencyInjection.md"/>
            </summary>
            <param name="builder">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder" /> to act upon.</param>
            <param name="options">The <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheOptions"/> instance to use.</param>
            <returns>The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheBuilderExtMethods.WithOptions(ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder,System.Action{ZiggyCreatures.Caching.Fusion.FusionCacheOptions})">
            <summary>
            Specify a custom logic to further configure the <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheOptions"/> instance to be used.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/DependencyInjection.md"/>
            </summary>
            <param name="builder">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder" /> to act upon.</param>
            <param name="action">The custom action that configure the <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheOptions"/> object.</param>
            <returns>The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheBuilderExtMethods.WithCacheKeyPrefix(ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder,System.String)">
            <summary>
            Set the cache key prefix to use.
            <br/><br/>
            <strong>EXAMPLE</strong>: if the CacheKeyPrefix specified is "MyCache:", a later call to cache.GetOrDefault("Product/123") will actually work on the cache key "MyCache:Product/123".
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/DependencyInjection.md"/>
            </summary>
            <param name="builder">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder" /> to act upon.</param>
            <param name="cacheKeyPrefix">The cache key prefix to use.</param>
            <returns>The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheBuilderExtMethods.WithCacheKeyPrefix(ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder)">
            <summary>
            Specify to use a cache key prefix, composed by the CacheName and a ":" separator.
            <br/><br/>
            <strong>EXAMPLE</strong>: if the CacheName is "MyCache" the CacheKeyPrefix will be "MyCache:", so that a later call to cache.GetOrDefault("Product/123") will actually work on the cache key "MyCache:Product/123".
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/DependencyInjection.md"/>
            </summary>
            <param name="builder">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder" /> to act upon.</param>
            <returns>The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheBuilderExtMethods.WithoutCacheKeyPrefix(ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder)">
            <summary>
            Specify NOT to use a cache key prefix.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/DependencyInjection.md"/>
            </summary>
            <param name="builder">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder" /> to act upon.</param>
            <returns>The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheBuilderExtMethods.WithDefaultEntryOptions(ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder,ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions)">
            <summary>
            Specify a <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions"/> instance to be used as the <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheOptions.DefaultEntryOptions"/> option.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/DependencyInjection.md"/>
            </summary>
            <param name="builder">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder" /> to act upon.</param>
            <param name="options">The <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions"/> instance to use.</param>
            <returns>The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheBuilderExtMethods.WithDefaultEntryOptions(ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder,System.Action{ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions})">
            <summary>
            Specify a custom logic to further configure the <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions"/> instance to be used as the <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheOptions.DefaultEntryOptions"/> option.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/DependencyInjection.md"/>
            </summary>
            <param name="builder">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder" /> to act upon.</param>
            <param name="action">The custom action that configure the <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheOptions"/> object.</param>
            <returns>The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheBuilderExtMethods.WithRegisteredLogger(ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder)">
            <summary>
            The builder will look for an <see cref="T:Microsoft.Extensions.Logging.ILogger`1"/> service registered in the DI container and use it, and throws if it cannot find one.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/DependencyInjection.md"/>
            </summary>
            <param name="builder">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder" /> to act upon.</param>
            <returns>The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheBuilderExtMethods.TryWithRegisteredLogger(ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder)">
            <summary>
            Indicates if the builder should try to find and use an <see cref="T:Microsoft.Extensions.Logging.ILogger`1"/> service registered in the DI container.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/DependencyInjection.md"/>
            </summary>
            <param name="builder">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder" /> to act upon.</param>
            <returns>The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheBuilderExtMethods.WithLogger(ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder,Microsoft.Extensions.Logging.ILogger{ZiggyCreatures.Caching.Fusion.FusionCache})">
            <summary>
            Specify a custom <see cref="T:Microsoft.Extensions.Logging.ILogger`1"/> instance to be used.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/DependencyInjection.md"/>
            </summary>
            <param name="builder">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder" /> to act upon.</param>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger`1"/> instance to use.</param>
            <returns>The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheBuilderExtMethods.WithLogger(ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder,System.Func{System.IServiceProvider,Microsoft.Extensions.Logging.ILogger{ZiggyCreatures.Caching.Fusion.FusionCache}})">
            <summary>
            Specify a custom <see cref="T:Microsoft.Extensions.Logging.ILogger`1"/> factory to be used.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/DependencyInjection.md"/>
            </summary>
            <param name="builder">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder" /> to act upon.</param>
            <param name="factory">The factory used to create the logger, with access to the <see cref="T:System.IServiceProvider"/>.</param>
            <returns>The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheBuilderExtMethods.WithoutLogger(ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder)">
            <summary>
            Indicates that the builder should not use a logger at all.
            </summary>
            <param name="builder"></param>
            <returns>The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheBuilderExtMethods.WithRegisteredMemoryCache(ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder)">
            <summary>
            The builder will look for an <see cref="T:Microsoft.Extensions.Caching.Memory.IMemoryCache"/> service registered in the DI container and use it, and throws if it cannot find one.
            <br/><br/>
            <strong>⚠ WARNING:</strong> normally the memory cache is registered in the DI container as a SINGLETON. This means that, if you use multiple named caches and also use WithRegisteredMemoryCache() on all of them, they will use THE SAME memory cache and without extra care in creating cache keys YOU MAY HAVE COLLISIONS.
            <br/>
            To avoid this, either don't use WithRegisteredMemoryCache() and let FusionCache create one for you (which will be different per cache instance) or use WithMemoryCache() and provide one directly.
            <br/><br/>
            <strong>NOTE:</strong> if a memory cache is not found, an <see cref="T:System.InvalidOperationException"/> will be thrown. To avoid this and use a best-effort behavior, use TryWithRegisteredMemoryCache().
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/DependencyInjection.md"/>
            </summary>
            <param name="builder">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder" /> to act upon.</param>
            <returns>The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheBuilderExtMethods.TryWithRegisteredMemoryCache(ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder)">
            <summary>
            Indicates if the builder should try to find and use an <see cref="T:Microsoft.Extensions.Caching.Memory.IMemoryCache"/> service registered in the DI container.
            <br/><br/>
            <strong>⚠ WARNING:</strong> normally the memory cache is registered in the DI container as a SINGLETON. This means that, if you use multiple named caches and also use WithRegisteredMemoryCache() on all of them, they will use THE SAME memory cache and without extra care in creating cache keys YOU MAY HAVE COLLISIONS.
            <br/>
            To avoid this, either don't use TryWithRegisteredMemoryCache() and let FusionCache create one for you (which will be different per cache instance) or use WithMemoryCache() and provide one directly.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/DependencyInjection.md"/>
            </summary>
            <param name="builder">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder" /> to act upon.</param>
            <returns>The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheBuilderExtMethods.WithMemoryCache(ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder,Microsoft.Extensions.Caching.Memory.IMemoryCache)">
            <summary>
            Specify a custom <see cref="T:Microsoft.Extensions.Caching.Memory.IMemoryCache"/> instance to be used.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/DependencyInjection.md"/>
            </summary>
            <param name="builder">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder" /> to act upon.</param>
            <param name="memoryCache">The <see cref="T:Microsoft.Extensions.Caching.Memory.IMemoryCache"/> instance to use.</param>
            <returns>The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheBuilderExtMethods.WithMemoryCache(ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder,System.Func{System.IServiceProvider,Microsoft.Extensions.Caching.Memory.IMemoryCache})">
            <summary>
            Specify a custom <see cref="T:Microsoft.Extensions.Caching.Memory.IMemoryCache"/> factory to be used.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/DependencyInjection.md"/>
            </summary>
            <param name="builder">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder" /> to act upon.</param>
            <param name="factory">The factory used to create the memory cache, with access to the <see cref="T:System.IServiceProvider"/>.</param>
            <returns>The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheBuilderExtMethods.WithStandardMemoryLocker(ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder)">
            <summary>
            The standard implementation of an <see cref="T:ZiggyCreatures.Caching.Fusion.Locking.IFusionCacheMemoryLocker"/> will be used (this is the default behaviour).
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/CacheStampede.md"/>
            </summary>
            <param name="builder">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder" /> to act upon.</param>
            <returns>The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheBuilderExtMethods.WithRegisteredMemoryLocker(ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder)">
            <summary>
            The builder will look for an <see cref="T:ZiggyCreatures.Caching.Fusion.Locking.IFusionCacheMemoryLocker"/> service registered in the DI container and use it, and throws if it cannot find one.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/CacheStampede.md"/>
            </summary>
            <param name="builder">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder" /> to act upon.</param>
            <returns>The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheBuilderExtMethods.TryWithRegisteredMemoryLocker(ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder)">
            <summary>
            Indicates if the builder should try to find and use an <see cref="T:ZiggyCreatures.Caching.Fusion.Locking.IFusionCacheMemoryLocker"/> service registered in the DI container.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/CacheStampede.md"/>
            </summary>
            <param name="builder">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder" /> to act upon.</param>
            <returns>The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheBuilderExtMethods.WithMemoryLocker(ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder,ZiggyCreatures.Caching.Fusion.Locking.IFusionCacheMemoryLocker)">
            <summary>
            Specify a custom <see cref="T:ZiggyCreatures.Caching.Fusion.Locking.IFusionCacheMemoryLocker"/> instance to be used.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/CacheStampede.md"/>
            </summary>
            <param name="builder">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder" /> to act upon.</param>
            <param name="memoryLocker">The <see cref="T:ZiggyCreatures.Caching.Fusion.Locking.IFusionCacheMemoryLocker"/> instance to use.</param>
            <returns>The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheBuilderExtMethods.WithMemoryLocker(ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder,System.Func{System.IServiceProvider,ZiggyCreatures.Caching.Fusion.Locking.IFusionCacheMemoryLocker})">
            <summary>
            Specify a custom <see cref="T:ZiggyCreatures.Caching.Fusion.Locking.IFusionCacheMemoryLocker"/> factory to be used.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/CacheStampede.md"/>
            </summary>
            <param name="builder">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder" /> to act upon.</param>
            <param name="factory">The factory used to create the memory locker, with access to the <see cref="T:System.IServiceProvider"/>.</param>
            <returns>The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheBuilderExtMethods.WithRegisteredSerializer(ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder)">
            <summary>
            Indicates if the builder should try to find and use an <see cref="T:ZiggyCreatures.Caching.Fusion.Serialization.IFusionCacheSerializer"/> service registered in the DI container.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/DependencyInjection.md"/>
            </summary>
            <param name="builder">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder" /> to act upon.</param>
            <returns>The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheBuilderExtMethods.WithSerializer(ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder,ZiggyCreatures.Caching.Fusion.Serialization.IFusionCacheSerializer)">
            <summary>
            Specify a custom <see cref="T:ZiggyCreatures.Caching.Fusion.Serialization.IFusionCacheSerializer"/> instance to be used.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/DependencyInjection.md"/>
            </summary>
            <param name="builder">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder" /> to act upon.</param>
            <param name="serializer">The <see cref="T:ZiggyCreatures.Caching.Fusion.Serialization.IFusionCacheSerializer"/> instance to use.</param>
            <returns>The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheBuilderExtMethods.WithSerializer(ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder,System.Func{System.IServiceProvider,ZiggyCreatures.Caching.Fusion.Serialization.IFusionCacheSerializer})">
            <summary>
            Specify a custom <see cref="T:ZiggyCreatures.Caching.Fusion.Backplane.IFusionCacheBackplane"/> factory to be used.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/DependencyInjection.md"/>
            </summary>
            <param name="builder">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder" /> to act upon.</param>
            <param name="factory">The factory used to create the serializer, with access to the <see cref="T:System.IServiceProvider"/>.</param>
            <returns>The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheBuilderExtMethods.WithRegisteredDistributedCache(ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder,System.Boolean)">
            <summary>
            The builder will look for an <see cref="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache"/> service (and a corresponding <see cref="T:ZiggyCreatures.Caching.Fusion.Serialization.IFusionCacheSerializer"/>) registered in the DI container and use them, and throws if it cannot find them.
            <br/><br/>
            <strong>⚠ WARNING:</strong> normally the distributed cache is registered in the DI container as a SINGLETON. This means that, if you use multiple named caches and also use WithRegisteredDistributedCache() on all of them, they will use THE SAME distributed cache and without extra care in creating cache keys YOU MAY HAVE COLLISIONS.
            <br/>
            One way to avoid collisions is to specify a CacheKeyPrefix by using one of the WithCacheKeyPrefix() methods.
            <br/><br/>
            <strong>NOTE:</strong> if an <see cref="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache"/> is not found in the DI container, or if one is found but no <see cref="T:ZiggyCreatures.Caching.Fusion.Serialization.IFusionCacheSerializer"/> is found, an <see cref="T:System.InvalidOperationException"/> will be thrown. To avoid this and use a best-effort behavior, use TryWithRegisteredDistributedCache().
            <br/><br/>
            <strong>NOTE:</strong> normally if an <see cref="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache"/> is found in the DI container, it will be used. In some scenarios though, like when using ASP.NET, one is automatically registered of type <see cref="T:Microsoft.Extensions.Caching.Distributed.MemoryDistributedCache"/>: that is not a real distributed cache, but just a memory cache masquerading as a distributed one. Since using that would do nothing and is a waste of resources, by default that is ignored. If you want to use it instead, just set the <paramref name="ignoreMemoryDistributedCache"/> to <see langword="false"/>.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/DependencyInjection.md"/>
            </summary>
            <param name="builder">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder" /> to act upon.</param>
            <param name="ignoreMemoryDistributedCache">Indicates if the distributed cache found in the DI container should be ignored if it is of type <see cref="T:Microsoft.Extensions.Caching.Distributed.MemoryDistributedCache"/>, since that is not really a distributed cache and it's automatically registered by ASP.NET MVC without control from the user.</param>
            <returns>The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheBuilderExtMethods.TryWithRegisteredDistributedCache(ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder,System.Boolean,System.Boolean)">
            <summary>
            Indicates if the builder should try to find and use an <see cref="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache"/> service (and a corresponding <see cref="T:ZiggyCreatures.Caching.Fusion.Serialization.IFusionCacheSerializer"/>) registered in the DI container.
            <br/><br/>
            <strong>⚠ WARNING:</strong> normally the distributed cache is registered in the DI container as a SINGLETON. This means that, if you use multiple named caches by using WithRegisteredDistributedCache() on all of them, they will use THE SAME distributed cache and without extra care in creating cache keys YOU MAY HAVE COLLISIONS.
            <br/>
            One way to avoid collisions is to specify a CacheKeyPrefix by using one of the WithCacheKeyPrefix() methods.
            <br/><br/>
            <strong>NOTE:</strong> if an <see cref="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache"/> is found, it can be used. In some scenarios though, like when using ASP.NET, one is automatically registered of type <see cref="T:Microsoft.Extensions.Caching.Distributed.MemoryDistributedCache"/>: that is not a real distributed cache, but just a memory cache masquerading as a distributed one. Since using that would do nothing and is a waste of resources, by default that is ignored. If you want to use it instead, just set the <paramref name="ignoreMemoryDistributedCache"/> to <see langword="false"/>.
            <br/><br/>
            <strong>NOTE:</strong> if an <see cref="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache"/> is found, a <see cref="T:ZiggyCreatures.Caching.Fusion.Serialization.IFusionCacheSerializer"/> would also be needed: when that is not the case, by default an <see cref="T:System.InvalidOperationException"/> will be thrown so to avoid surprises at runtime, like thinking that a distributed cache will be used when instead it will not. If you want to avoid this and just have a best-effort approach by ignoring a distributed cache when a serializer is missing, set the <paramref name="throwIfMissingSerializer"/> param to <see langword="false"/>.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/DependencyInjection.md"/>
            </summary>
            <param name="builder">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder" /> to act upon.</param>
            <param name="ignoreMemoryDistributedCache">Indicates if the distributed cache found in the DI container should be ignored if it is of type <see cref="T:Microsoft.Extensions.Caching.Distributed.MemoryDistributedCache"/>, since that is not really a distributed cache and it's automatically registered by ASP.NET MVC without control from the user.</param>
            <param name="throwIfMissingSerializer">Indicates if an exception should be thrown in case a valid <see cref="T:ZiggyCreatures.Caching.Fusion.Serialization.IFusionCacheSerializer"/> has not been provided: this is useful to avoid thinking of having a usable distributed cache when, in reality, that is not the case since a serializer is needed for it to work and none has been found.</param>
            <returns>The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheBuilderExtMethods.WithDistributedCache(ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder,Microsoft.Extensions.Caching.Distributed.IDistributedCache,ZiggyCreatures.Caching.Fusion.Serialization.IFusionCacheSerializer)">
            <summary>
            Specify a custom <see cref="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache"/> and a custom <see cref="T:ZiggyCreatures.Caching.Fusion.Serialization.IFusionCacheSerializer"/> instances to be used.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/DependencyInjection.md"/>
            </summary>
            <param name="builder">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder" /> to act upon.</param>
            <param name="distributedCache">The <see cref="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache"/> instance to use.</param>
            <param name="serializer">The <see cref="T:ZiggyCreatures.Caching.Fusion.Serialization.IFusionCacheSerializer"/> instance to use, or <see langword="null"/> to keep the one specified in another call.</param>
            <returns>The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheBuilderExtMethods.WithDistributedCache(ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder,System.Func{System.IServiceProvider,Microsoft.Extensions.Caching.Distributed.IDistributedCache},ZiggyCreatures.Caching.Fusion.Serialization.IFusionCacheSerializer)">
            <summary>
            Specify a custom <see cref="T:ZiggyCreatures.Caching.Fusion.Backplane.IFusionCacheBackplane"/> factory to be used.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/DependencyInjection.md"/>
            </summary>
            <param name="builder">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder" /> to act upon.</param>
            <param name="factory">The factory used to create the backplane, with access to the <see cref="T:System.IServiceProvider"/>.</param>
            <param name="serializer">The <see cref="T:ZiggyCreatures.Caching.Fusion.Serialization.IFusionCacheSerializer"/> instance to use, or <see langword="null"/> to keep the one specified in another call.</param>
            <returns>The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheBuilderExtMethods.WithoutDistributedCache(ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder)">
            <summary>
            Indicates that the builder should not use a distributed case.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/DependencyInjection.md"/>
            </summary>
            <param name="builder">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder" /> to act upon.</param>
            <returns>The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheBuilderExtMethods.WithRegisteredBackplane(ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder)">
            <summary>
            The builder will look for an <see cref="T:ZiggyCreatures.Caching.Fusion.Backplane.IFusionCacheBackplane"/> service registered in the DI container and use it, and throws if it cannot find one.
            <br/><br/>
            <strong>NOTE:</strong> if a backplane is not found, an <see cref="T:System.InvalidOperationException"/> will be thrown. To avoid this and use a best-effort behavior, use TryWithRegisteredBackplane().
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/DependencyInjection.md"/>
            </summary>
            <param name="builder">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder" /> to act upon.</param>
            <returns>The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheBuilderExtMethods.TryWithRegisteredBackplane(ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder)">
            <summary>
            Indicates if the builder should try find and use an <see cref="T:ZiggyCreatures.Caching.Fusion.Backplane.IFusionCacheBackplane"/> service registered in the DI container.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/DependencyInjection.md"/>
            </summary>
            <param name="builder">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder" /> to act upon.</param>
            <returns>The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheBuilderExtMethods.WithBackplane(ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder,ZiggyCreatures.Caching.Fusion.Backplane.IFusionCacheBackplane)">
            <summary>
            Specify a custom <see cref="T:ZiggyCreatures.Caching.Fusion.Backplane.IFusionCacheBackplane"/> instance to be used.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/DependencyInjection.md"/>
            </summary>
            <param name="builder">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder" /> to act upon.</param>
            <param name="backplane">The <see cref="T:ZiggyCreatures.Caching.Fusion.Backplane.IFusionCacheBackplane"/> instance to use.</param>
            <returns>The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheBuilderExtMethods.WithBackplane(ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder,System.Func{System.IServiceProvider,ZiggyCreatures.Caching.Fusion.Backplane.IFusionCacheBackplane})">
            <summary>
            Specify a custom <see cref="T:ZiggyCreatures.Caching.Fusion.Backplane.IFusionCacheBackplane"/> factory to be used.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/DependencyInjection.md"/>
            </summary>
            <param name="builder">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder" /> to act upon.</param>
            <param name="factory">The factory used to create the backplane, with access to the <see cref="T:System.IServiceProvider"/>.</param>
            <returns>The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheBuilderExtMethods.WithoutBackplane(ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder)">
            <summary>
            Indicates that the builder should not use a backplane.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/DependencyInjection.md"/>
            </summary>
            <param name="builder">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder" /> to act upon.</param>
            <returns>The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheBuilderExtMethods.WithAllRegisteredPlugins(ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder)">
            <summary>
            Indicates if the builder should try find and use any available <see cref="T:ZiggyCreatures.Caching.Fusion.Plugins.IFusionCachePlugin"/> services registered in the DI container.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/DependencyInjection.md"/>
            </summary>
            <param name="builder">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder" /> to act upon.</param>
            <returns>The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheBuilderExtMethods.WithoutAllRegisteredPlugins(ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder)">
            <summary>
            Indicates if the builder should NOT try find and use any available <see cref="T:ZiggyCreatures.Caching.Fusion.Plugins.IFusionCachePlugin"/> services registered in the DI container.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/DependencyInjection.md"/>
            </summary>
            <param name="builder">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder" /> to act upon.</param>
            <returns>The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheBuilderExtMethods.WithPlugin(ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder,ZiggyCreatures.Caching.Fusion.Plugins.IFusionCachePlugin)">
            <summary>
            Adds a custom <see cref="T:ZiggyCreatures.Caching.Fusion.Plugins.IFusionCachePlugin"/> instance to be used.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/DependencyInjection.md"/>
            </summary>
            <param name="builder">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder" /> to act upon.</param>
            <param name="plugin">The <see cref="T:ZiggyCreatures.Caching.Fusion.Plugins.IFusionCachePlugin"/> instance to use.</param>
            <returns>The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheBuilderExtMethods.WithPlugin(ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder,System.Func{System.IServiceProvider,ZiggyCreatures.Caching.Fusion.Plugins.IFusionCachePlugin})">
            <summary>
            Specify a custom <see cref="T:ZiggyCreatures.Caching.Fusion.Backplane.IFusionCacheBackplane"/> factory to be used.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/DependencyInjection.md"/>
            </summary>
            <param name="builder">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder" /> to act upon.</param>
            <param name="factory">The factory used to create the backplane, with access to the <see cref="T:System.IServiceProvider"/>.</param>
            <returns>The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheBuilderExtMethods.WithPlugins(ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder,ZiggyCreatures.Caching.Fusion.Plugins.IFusionCachePlugin[])">
            <summary>
            Adds one or more custom <see cref="T:ZiggyCreatures.Caching.Fusion.Plugins.IFusionCachePlugin"/> instances to be used.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/DependencyInjection.md"/>
            </summary>
            <param name="builder">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder" /> to act upon.</param>
            <param name="plugins">The <see cref="T:ZiggyCreatures.Caching.Fusion.Plugins.IFusionCachePlugin"/> instances to use.</param>
            <returns>The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheBuilderExtMethods.WithoutPlugins(ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder)">
            <summary>
            Indicates that the builder should not use any plugins.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/DependencyInjection.md"/>
            </summary>
            <param name="builder">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder" /> to act upon.</param>
            <returns>The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheBuilderExtMethods.WithPostSetup(ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder,System.Action{System.IServiceProvider,ZiggyCreatures.Caching.Fusion.IFusionCache})">
            <summary>
            Specify a custom post-setup action, that will be invoked just after the creation of the FusionCache instance, and before returning it to the caller.
            <br/><br/>
            <strong>NOTE:</strong> it is possible to call this multiple times, to add multiple post-setup calls one after the other to combine them for a powerful result.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/DependencyInjection.md"/>
            </summary>
            <param name="builder">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder" /> to act upon.</param>
            <param name="action">The custom post-setup action to be added to the builder pipeline.</param>
            <returns>The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheBuilderExtMethods.WithoutPostSetup(ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder)">
            <summary>
            Indicates that the builder should not use any post-setup actions.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/DependencyInjection.md"/>
            </summary>
            <param name="builder">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder" /> to act upon.</param>
            <returns>The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheBuilderExtMethods.TryWithAutoSetup(ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder,System.Boolean)">
            <summary>
            Tells the builder to try to find and use all the compatible services registered in the DI container, like a distributed cache, a backplane, plugins, etc.
            <br/><br/>
            <strong>NOTE:</strong> if an <see cref="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache"/> is found, it can be used. In some scenarios though, like when using ASP.NET, one is automatically registered of type <see cref="T:Microsoft.Extensions.Caching.Distributed.MemoryDistributedCache"/>: that is not a real distributed cache, but just a memory cache masquerading as a distributed one. Since using that would do nothing and is a waste of resources, by default that is ignored. If you want to use it instead, just set the <paramref name="ignoreMemoryDistributedCache"/> to <see langword="false"/>.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/DependencyInjection.md"/>
            </summary>
            <param name="builder">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder" /> to act upon.</param>
            <param name="ignoreMemoryDistributedCache">Indicates if the distributed cache found in the DI container should be ignored if it is of type <see cref="T:Microsoft.Extensions.Caching.Distributed.MemoryDistributedCache"/>, since that is not really a distributed cache and it's automatically registered by ASP.NET MVC without control from the user</param>
            <returns>The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder"/> so that additional calls can be chained.</returns>
        </member>
        <member name="T:ZiggyCreatures.Caching.Fusion.FusionCacheDiagnostics">
            <summary>
            A support class for FusionCache diagnostics.
            </summary>
        </member>
        <member name="F:ZiggyCreatures.Caching.Fusion.FusionCacheDiagnostics.FusionCacheVersion">
            <summary>
            The current version of FusionCache.
            </summary>
        </member>
        <member name="F:ZiggyCreatures.Caching.Fusion.FusionCacheDiagnostics.ActivitySourceName">
            <summary>
            The activity source name for FusionCache.
            </summary>
        </member>
        <member name="F:ZiggyCreatures.Caching.Fusion.FusionCacheDiagnostics.ActivitySourceNameMemoryLevel">
            <summary>
            The activity source name for the FusionCache memory level.
            </summary>
        </member>
        <member name="F:ZiggyCreatures.Caching.Fusion.FusionCacheDiagnostics.ActivitySourceNameDistributedLevel">
            <summary>
            The activity source name for the FusionCache distributed level.
            </summary>
        </member>
        <member name="F:ZiggyCreatures.Caching.Fusion.FusionCacheDiagnostics.ActivitySourceNameBackplane">
            <summary>
            The activity source name for the FusionCache backplane.
            </summary>
        </member>
        <member name="F:ZiggyCreatures.Caching.Fusion.FusionCacheDiagnostics.MeterName">
            <summary>
            The meter name for FusionCache.
            </summary>
        </member>
        <member name="F:ZiggyCreatures.Caching.Fusion.FusionCacheDiagnostics.MeterNameMemoryLevel">
            <summary>
            The meter name for the FusionCache memory level.
            </summary>
        </member>
        <member name="F:ZiggyCreatures.Caching.Fusion.FusionCacheDiagnostics.MeterNameDistributedLevel">
            <summary>
            The meter name for the FusionCache distributed level.
            </summary>
        </member>
        <member name="F:ZiggyCreatures.Caching.Fusion.FusionCacheDiagnostics.MeterNameBackplane">
            <summary>
            The meter name for the FusionCache backplane.
            </summary>
        </member>
        <member name="T:ZiggyCreatures.Caching.Fusion.FusionCacheDistributedCacheException">
            <summary>
            The generic exception that is thrown when a distributed cache error occurs: the InnerException contains the original exception.
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheDistributedCacheException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheDistributedCacheException"/> class.
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheDistributedCacheException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheDistributedCacheException"/> class with a specified error message.</summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheDistributedCacheException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheDistributedCacheException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheDistributedCacheException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheDistributedCacheException"/> class with serialized data.</summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions">
            <summary>
            Represents all the options available for a single <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCache"/> entry.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/Options.md"/>
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.#ctor(System.Nullable{System.TimeSpan})">
            <summary>
            Creates a new instance of a <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions"/> object.
            </summary>
            <param name="duration">The value for the <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.Duration"/> property. If null, <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheGlobalDefaults.EntryOptionsDuration"/> will be used.</param>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.Duration">
            <summary>
            The amount of time after which a cache entry is <strong>considered expired</strong>.
            <br/><br/>
            Please note the wording "considered expired" here: what it means is that, although from the OUTSIDE what is observed is always the same (a piece of data logically expires after the specified <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.Duration"/>), on the INSIDE things change depending on the fact that fail-safe is enabled or not.
            <br/>
            More specifically:
            <br/>
            - if <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.IsFailSafeEnabled"/> is set to <see langword="false"/> the <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.Duration"/> corresponds to the actual underlying duration in the cache, nothing more, nothing less
            <br/>
            - if <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.IsFailSafeEnabled" /> is set to <see langword="true"/>, the underlying duration in the cache corresponds to <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.FailSafeMaxDuration"/> and the <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.Duration"/> property is used internally as a way to indicate when the data should be considered stale (expired), without making it actually expire inside the cache levels (memory and/or distributed)
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/FailSafe.md"/>
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.EagerRefreshThreshold">
            <summary>
            The threshold to apply when deciding whether to refresh the cache entry eagerly (that is, before the actual expiration).
            <br/>
            This value is intended as a percentage of the <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.Duration"/> property, expressed as a value between 0.0 and 1.0 (eg: 0.5 = 50%, 0.75 = 75%, etc).
            <br/><br/>
            For example by setting it to 0.8 (80%) with a <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.Duration"/> of 10 minutes, if there's a cache access for the entry after 8 minutes (80% of 10 minutes) an eager refresh will automatically start in the background, while immediately returning the (still valid) cached value to the caller.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/Timeouts.md"/>
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.LockTimeout">
            <summary>
            The timeout to apply when trying to acquire a memory lock during a factory execution.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/CacheStampede.md"/>
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.JitterMaxDuration">
            <summary>
            The maximum amount of extra duration to add to the normal <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.Duration"/> to allow for more variable expirations.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.Size">
            <summary>
            The size of the cache entry, used as a value for the <see cref="P:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions.Size"/> property in the underlying memory cache.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/StepByStep.md"/>
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.Priority">
            <summary>
            The <see cref="T:Microsoft.Extensions.Caching.Memory.CacheItemPriority"/> of the entry in the underlying memory cache.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.IsFailSafeEnabled">
            <summary>
            Enable the fail-safe mechanism, which will be activated if and when something goes wrong while calling a factory or getting data from a distributed cache.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/FailSafe.md"/>
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.FailSafeMaxDuration">
            <summary>
            When fail-safe is enabled this is the maximum amount of time a cache entry can be used in case of problems, even if expired.
            <br/><br/>
            Specifically:
            <br/>
            - if <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.IsFailSafeEnabled"/> is set to <see langword="true"/>, an entry will apparently expire normally after the specified Duration: behind the scenes though it will also be kept around for this (usually long) amount of time, so it may be used as a fallback value in case of problems;
            <br/>
            - if <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.IsFailSafeEnabled"/> is set to <see langword="false"/>, this is ignored;
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/FailSafe.md"/>
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.FailSafeThrottleDuration">
            <summary>
            If fail-safe is enabled, something goes wrong while getting data (from the distributed cache or while calling the factory) and there is an expired entry to be used as a fallback value, the fail-safe mechanism will actually be activated.
            In that case the fallback value will not only be returned to the caller but also put in the cache for this duration (usually small) to avoid excessive load on the distributed cache and/or the factory getting called continuously.
            <br/><br/>
            <strong>TL/DR:</strong> the amount of time an expired cache entry is temporarily considered non-expired before checking the source (calling the factory) again.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/FailSafe.md"/>
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.FactorySoftTimeout">
            <summary>
            The maximum execution time allowed for the factory, applied only if fail-safe is enabled and there is a fallback value to return.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/Timeouts.md"/>
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.FactoryHardTimeout">
            <summary>
            The maximum execution time allowed for the factory in any case, even if there is not a stale value to fall back to.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/Timeouts.md"/>
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.AllowTimedOutFactoryBackgroundCompletion">
            <summary>
            Enable a factory that has hit a synthetic timeout (both soft/hard) to complete in the background and update the cache with the new value.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/Timeouts.md"/>
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.DistributedCacheDuration">
            <summary>
            The duration specific for the distributed cache, if any. If not set, <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.Duration"/> will be used.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/CacheLevels.md"/>
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.DistributedCacheFailSafeMaxDuration">
            <summary>
            When fail-safe is enabled this is the maximum amount of time a cache entry can be used in case of problems, even if expired, in the distributed cache.
            <br/><br/>
            Specifically:
            <br/>
            - if <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.IsFailSafeEnabled"/> is set to <see langword="true"/>, an entry will apparently expire normally after the specified Duration: behind the scenes though it will also be kept around for this (usually long) amount of time, so it may be used as a fallback value in case of problems;
            <br/>
            - if <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.IsFailSafeEnabled"/> is set to <see langword="false"/>, this is ignored;
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/FailSafe.md"/>
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.DistributedCacheSoftTimeout">
            <summary>
            The maximum execution time allowed for each operation on the distributed cache, applied only if fail-safe is enabled and there is a fallback value to return.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/Timeouts.md"/>
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.DistributedCacheHardTimeout">
            <summary>
            The maximum execution time allowed for each operation on the distributed cache in any case, even if there is not a stale value to fall back to.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/Timeouts.md"/>
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.AllowBackgroundDistributedCacheOperations">
            <summary>
            Even if the distributed cache is a secondary level, by default every operation on it (get/set/remove/etc) is blocking: that is to say the FusionCache method call would not return until the inner distributed cache operation is completed.
            <br/>
            This is to avoid rare edge cases like saving a value in the cache and immediately checking the underlying distributed cache directly, not finding the value (because it is still being saved): very very rare, but still.
            <br/>
            Setting this flag to <see langword="true"/> will execute most of these operations in the background, resulting in a performance boost.
            <br/><br/>
            <strong>TL/DR:</strong> set this flag to <see langword="true"/> for a perf boost, but watch out for rare side effects.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/CacheLevels.md"/>
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.ReThrowDistributedCacheExceptions">
            <summary>
            Set this to <see langword="true"/> to allow the bubble up of distributed cache exceptions (default is <see langword="false"/>).
            Please note that, even if set to <see langword="true"/>, in some cases you would also need <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.AllowBackgroundDistributedCacheOperations"/> set to <see langword="false"/> and no timeout (neither soft nor hard) specified.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/CacheLevels.md"/>
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.ReThrowSerializationExceptions">
            <summary>
            Set this to <see langword="true"/> to allow the bubble up of serialization exceptions (default is <see langword="true"/>).
            Please note that, even if set to <see langword="true"/>, in some cases you would also need <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.AllowBackgroundDistributedCacheOperations"/> set to <see langword="false"/> and no timeout (neither soft nor hard) specified.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/CacheLevels.md"/>
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.EnableBackplaneNotifications">
            <summary>
            Enable publishing of backplane notifications after some operations, like a SET (via a Set/GetOrSet call) or a REMOVE (via a Remove call).
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/Backplane.md"/>
            <br/>
            <strong>OBSOLETE NOW:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/issues/101"/>
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.SkipBackplaneNotifications">
            <summary>
            Skip the usage of the backplane, if any.
            <br/>
            Normally, if you have a backplane setup, any change operation (like a SET via a Set/GetOrSet call or a REMOVE via a Remove call) will send backplane notifications: this option can skip it.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/Backplane.md"/>
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.AllowBackgroundBackplaneOperations">
            <summary>
            By default, every operation on the backplane is non-blocking: that is to say the FusionCache method call would not wait for each backplane operation to be completed.
            <br/>
            Setting this flag to <see langword="false"/> will execute these operations in a blocking fashion, typically resulting in worse performance.
            <br/><br/>
            <strong>TL/DR:</strong> if you want to wait for backplane operations to complete, set this flag to <see langword="false"/>.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/Backplane.md"/>
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.ReThrowBackplaneExceptions">
            <summary>
            Set this to <see langword="true"/> to allow the bubble up of backplane exceptions (default is <see langword="false"/>).
            Please note that, even if set to <see langword="true"/>, in some cases you would also need <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.AllowBackgroundBackplaneOperations"/> set to <see langword="false"/> and no timeout (neither soft nor hard) specified.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/Backplane.md"/>
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.SkipDistributedCache">
            <summary>
            Skip the usage of the distributed cache, if any.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/CacheLevels.md"/>
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.SkipDistributedCacheReadWhenStale">
            <summary>
            When a 2nd level (distributed cache) is used and a cache entry in the 1st level (memory cache) is found but is stale, a read is done on the distributed cache: the reason is that in a multi-node environment another node may have updated the cache entry, so we may found a newer version of it.
            <br/><br/>
            There are situations though, like in a mobile app with a SQLite 2nd level, where the 2nd level is not really "distributed" but just "out of process" (to ease cold starts): in situations like this no one can have updated the 2nd level, so we can skip that extra read for a perf boost (of course the write part will still be done).
            <br/><br/>
            <strong>TL/DR:</strong> if your 2nd level is not "distributed" but only "out of process", setting this to <see langword="true"/> can give you a nice performance boost.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/CacheLevels.md"/>
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.SkipMemoryCache">
            <summary>
            Skip the usage of the memory cache.
            <br/><br/>
            <strong>NOTE:</strong> this option must be used very carefully and is generally not recommended, as it will not protect you from some problems like Cache Stampede. Also, it can lead to a lot of extra work for the 2nd level (distributed cache) and a lot of extra network traffic.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/CacheLevels.md"/>
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.ToString">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.GetJitterDurationMs">
            <summary>
            If <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.JitterMaxDuration"/> is greater than <see cref="F:System.TimeSpan.Zero"/>, this method returns a randomized duration (in ms) between 0 and <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.JitterMaxDuration"/> that will be added to the entry's specified <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.Duration"/>.
            <br/>
            This is done to avoid a variation of the so called <see href="https://en.wikipedia.org/wiki/Cache_stampede"><strong>Cache Stampede problem</strong></see> that may happen when the entry for the same key expires on multiple nodes at the same time, because of high synchronization.
            </summary>
            <returns>An additional cache duration (in ms) to slightly vary the entry duration</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.SetJittering(System.TimeSpan)">
            <summary>
            Set the jitter max duration.
            </summary>
            <param name="jitterMaxDuration">The jitter max duration.</param>
            <returns>The <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.SetDuration(System.TimeSpan)">
            <summary>
            Set the <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.Duration"/> to the specified <see cref="T:System.TimeSpan"/> value.
            </summary>
            <param name="duration">The duration to set.</param>
            <returns>The <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.SetDurationZero">
            <summary>
            Set the <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.Duration"/> to be zero: this will effectively remove the entry from the cache if fail-safe is disabled, or it will set the entry as logically expired if fail-safe is enabled (so it can be used later as a fallback).
            </summary>
            <returns>The <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.SetDurationInfinite">
            <summary>
            Set the <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.Duration"/> to be infinite, so it will never expire.
            <strong>NOTE:</strong> the expiration will not be literally "infinite", but it will be set to <see cref="F:System.DateTimeOffset.MaxValue"/> which in turn is Dec 31st 9999 which, I mean, c'mon. If that time will come and you'll have some problems feel free to try and contact me :-)
            </summary>
            <returns>The <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.SetDistributedCacheDuration(System.Nullable{System.TimeSpan})">
            <summary>
            Set the <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.DistributedCacheDuration"/> to the specified <see cref="T:System.TimeSpan"/> value.
            </summary>
            <param name="duration">The duration to set.</param>
            <returns>The <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.SetDistributedCacheDurationZero">
            <summary>
            Set the <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.DistributedCacheDuration"/> to be zero: this will effectively remove the entry from the cache if fail-safe is disabled, or it will set the entry as logically expired if fail-safe is enabled (so it can be used later as a fallback).
            </summary>
            <returns>The <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.SetDistributedCacheDurationInfinite">
            <summary>
            Set the <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.DistributedCacheDuration"/> to be infinite, so it will never expire.
            <strong>NOTE:</strong> the expiration will not be literally "infinite", but it will be set to <see cref="F:System.DateTimeOffset.MaxValue"/> which in turn is Dec 31st 9999 which, I mean, c'mon. If that time will come and you'll have some problems feel free to try and contact me :-)
            </summary>
            <returns>The <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.SetDurationMs(System.Int32)">
            <summary>
            Set the <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.Duration"/> to the specified number of milliseconds.
            </summary>
            <param name="durationMs">The duration to set, in milliseconds.</param>
            <returns>The <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.SetDurationSec(System.Int32)">
            <summary>
            Set the <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.Duration"/> to the specified number of seconds.
            </summary>
            <param name="durationSec">The duration to set, in seconds.</param>
            <returns>The <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.SetDurationMin(System.Int32)">
            <summary>
            Set the <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.Duration"/> to the specified number of minutes.
            </summary>
            <param name="durationMin">The duration to set, in minutes.</param>
            <returns>The <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.SetEagerRefresh(System.Nullable{System.Single})">
            <summary>
            Set the <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.EagerRefreshThreshold"/>.
            </summary>
            <param name="threshold">The amount to set: values &lt;= 0.0 or &gt;= 1.0 will be normalized to <see langword="null"/>, meaning "no eager refresh".</param>
            <returns>The <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.SetSize(System.Nullable{System.Int64})">
            <summary>
            Set the size of the entry.
            </summary>
            <param name="size">The (unitless) size value to set.</param>
            <returns>The <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.SetPriority(Microsoft.Extensions.Caching.Memory.CacheItemPriority)">
            <summary>
            Set the <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.Priority"/>.
            </summary>
            <param name="priority">The value for the <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.Priority"/> property.</param>
            <returns>The <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.SetFailSafe(System.Boolean,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
            <summary>
            Set various options related to the fail-safe mechanism.
            </summary>
            <param name="isEnabled">Enable or disable the fail-safe mechanism.</param>
            <param name="maxDuration">The value for the <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.FailSafeMaxDuration"/> property.</param>
            <param name="throttleDuration">The value for the <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.FailSafeThrottleDuration"/> property.</param>
            <returns>The <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.SetDistributedCacheFailSafeOptions(System.Nullable{System.TimeSpan})">
            <summary>
            Set various options related to the fail-safe mechanism, related to the distributed cache.
            <br/><br/>
            <strong>NOTE:</strong> this will not enable or disable the fail-safe mechanism, but only set some overrides.
            </summary>
            <param name="distributedCacheMaxDuration"></param>
            <returns>The <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.SetFactoryTimeouts(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.Nullable{System.Boolean})">
            <summary>
            Set various options related to the factory timeouts handling.
            </summary>
            <param name="softTimeout">The value for the <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.FactorySoftTimeout"/> property.</param>
            <param name="hardTimeout">The value for the <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.FactoryHardTimeout"/> property.</param>
            <param name="keepTimedOutFactoryResult">The value for the <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.AllowTimedOutFactoryBackgroundCompletion"/> property.</param>
            <returns>The <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.SetDistributedCacheTimeouts(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.Nullable{System.Boolean})">
            <summary>
            Set various options related to the factory timeouts handling.
            </summary>
            <param name="softTimeout">The value for the <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.DistributedCacheSoftTimeout"/> property.</param>
            <param name="hardTimeout">The value for the <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.DistributedCacheHardTimeout"/> property.</param>
            <param name="allowBackgroundDistributedCacheOperations">The value for the <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.AllowBackgroundDistributedCacheOperations"/> property.</param>
            <returns>The <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.SetBackplane(System.Boolean)">
            <summary>
            Enable or disable backplane notifications.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/Backplane.md"/>
            <br/>
            <strong>OBSOLETE NOW:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/issues/101"/>
            </summary>
            <param name="enableBackplaneNotifications">Set the <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.EnableBackplaneNotifications"/> property.</param>
            <returns>The <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.SetSkipBackplaneNotifications(System.Boolean)">
            <summary>
            Set the <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.SkipBackplaneNotifications"/> option.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/Backplane.md"/>
            </summary>
            <param name="skip">The value for the <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.SkipBackplaneNotifications"/> property.</param>
            <returns>The <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.SetSkipDistributedCache(System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            Set the <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.SkipDistributedCache"/> option.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/CacheLevels.md"/>
            </summary>
            <param name="skip">The value for the <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.SkipDistributedCache"/> property.</param>
            <param name="skipBackplaneNotifications">The value for the <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.SkipBackplaneNotifications"/> property: if set to <see langword="null"/>, no changes will be made.</param>
            <returns>The <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.SetSkipDistributedCacheReadWhenStale(System.Boolean)">
            <summary>
            Set the <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.SkipDistributedCacheReadWhenStale"/> option.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/CacheLevels.md"/>
            </summary>
            <param name="skip">Set the <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.SkipDistributedCacheReadWhenStale"/> property.</param>
            <returns>The <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.SetSkipMemoryCache(System.Boolean)">
            <summary>
            Set the <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.SkipMemoryCache"/> option.
            <br/><br/>
            <strong>NOTE:</strong> this option must be used very carefully and is generally not recommended, as it will not protect you from some problems like Cache Stampede. Also, it can lead to a lot of extra work for the 2nd level (distributed cache) and a lot of extra network traffic.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/CacheLevels.md"/>
            </summary>
            <param name="skip">The value for the <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.SkipMemoryCache"/> property.</param>
            <returns>The <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.Duplicate(System.Nullable{System.TimeSpan})">
            <summary>
            Creates a new <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions"/> object by duplicating all the options of the current one.
            </summary>
            <param name="duration">A custom <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.Duration"/> that, if specified, will overwrite the current one.</param>
            <returns>The newly created <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions"/> object.</returns>
        </member>
        <member name="T:ZiggyCreatures.Caching.Fusion.FusionCacheExtMethods">
            <summary>
            A set of extension methods that add some commonly used overloads to any instance of a <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCache"/> object.
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheExtMethods.GetOrSetAsync``1(ZiggyCreatures.Caching.Fusion.IFusionCache,System.String,``0,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Get the value of type <typeparamref name="TValue"/> in the cache for the specified <paramref name="key"/>: if not there, the <paramref name="defaultValue"/> will be saved according with the <paramref name="duration"/> provided.
            </summary>
            <typeparam name="TValue">The type of the value in the cache.</typeparam>
            <param name="cache">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCache"/> instance.</param>
            <param name="key">The cache key which identifies the entry in the cache.</param>
            <param name="defaultValue">In case the value is not in the cache this value will be saved and returned instead.</param>
            <param name="duration">The value for the newly created <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.Duration"/> property, automatically created by duplicating <see cref="P:ZiggyCreatures.Caching.Fusion.IFusionCache.DefaultEntryOptions"/>.</param>
            <param name="token">An optional <see cref="T:System.Threading.CancellationToken"/> to cancel the operation.</param>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheExtMethods.GetOrSet``1(ZiggyCreatures.Caching.Fusion.IFusionCache,System.String,``0,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Get the value of type <typeparamref name="TValue"/> in the cache for the specified <paramref name="key"/>: if not there, the <paramref name="defaultValue"/> will be saved according with the <paramref name="duration"/> provided.
            </summary>
            <typeparam name="TValue">The type of the value in the cache.</typeparam>
            <param name="cache">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCache"/> instance.</param>
            <param name="key">The cache key which identifies the entry in the cache.</param>
            <param name="defaultValue">In case the value is not in the cache this value will be saved and returned instead.</param>
            <param name="duration">The value for the newly created <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.Duration"/> property, automatically created by duplicating <see cref="P:ZiggyCreatures.Caching.Fusion.IFusionCache.DefaultEntryOptions"/>.</param>
            <param name="token">An optional <see cref="T:System.Threading.CancellationToken"/> to cancel the operation.</param>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheExtMethods.GetOrSetAsync``1(ZiggyCreatures.Caching.Fusion.IFusionCache,System.String,``0,System.Action{ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions},System.Threading.CancellationToken)">
            <summary>
            Get the value of type <typeparamref name="TValue"/> in the cache for the specified <paramref name="key"/>: if not there, the <paramref name="defaultValue"/> will be saved according with the <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions"/> resulting by calling the provided <paramref name="setupAction"/> lambda.
            </summary>
            <typeparam name="TValue">The type of the value in the cache.</typeparam>
            <param name="cache">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCache"/> instance.</param>
            <param name="key">The cache key which identifies the entry in the cache.</param>
            <param name="defaultValue">In case the value is not in the cache this value will be saved and returned instead.</param>
            <param name="setupAction">The setup action used to further configure the newly created <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions"/> object, automatically created by duplicating <see cref="P:ZiggyCreatures.Caching.Fusion.IFusionCache.DefaultEntryOptions"/>.</param>
            <param name="token">An optional <see cref="T:System.Threading.CancellationToken"/> to cancel the operation.</param>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheExtMethods.GetOrSet``1(ZiggyCreatures.Caching.Fusion.IFusionCache,System.String,``0,System.Action{ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions},System.Threading.CancellationToken)">
            <summary>
            Get the value of type <typeparamref name="TValue"/> in the cache for the specified <paramref name="key"/>: if not there, the <paramref name="defaultValue"/> will be saved according with the <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions"/> resulting by calling the provided <paramref name="setupAction"/> lambda.
            </summary>
            <typeparam name="TValue">The type of the value in the cache.</typeparam>
            <param name="cache">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCache"/> instance.</param>
            <param name="key">The cache key which identifies the entry in the cache.</param>
            <param name="defaultValue">In case the value is not in the cache this value will be saved and returned instead.</param>
            <param name="setupAction">The setup action used to further configure the newly created <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions"/> object, automatically created by duplicating <see cref="P:ZiggyCreatures.Caching.Fusion.IFusionCache.DefaultEntryOptions"/>.</param>
            <param name="token">An optional <see cref="T:System.Threading.CancellationToken"/> to cancel the operation.</param>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheExtMethods.GetOrDefaultAsync``1(ZiggyCreatures.Caching.Fusion.IFusionCache,System.String,System.Action{ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions},``0,System.Threading.CancellationToken)">
            <summary>
            Get the value of type <typeparamref name="TValue"/> in the cache for the specified <paramref name="key"/>: if not there, the <paramref name="defaultValue"/> will be returned.
            </summary>
            <typeparam name="TValue">The type of the value in the cache.</typeparam>
            <param name="cache">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCache"/> instance.</param>
            <param name="key">The cache key which identifies the entry in the cache.</param>
            <param name="defaultValue">The default value to return if the value for the given <paramref name="key"/> is not in the cache.</param>
            <param name="setupAction">The setup action used to further configure the newly created <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions"/> object, automatically created by duplicating <see cref="P:ZiggyCreatures.Caching.Fusion.IFusionCache.DefaultEntryOptions"/>.</param>
            <param name="token">An optional <see cref="T:System.Threading.CancellationToken"/> to cancel the operation.</param>
            <returns>The value in the cache or the <paramref name="defaultValue"/> .</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheExtMethods.GetOrDefault``1(ZiggyCreatures.Caching.Fusion.IFusionCache,System.String,System.Action{ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions},``0,System.Threading.CancellationToken)">
            <summary>
            Get the value of type <typeparamref name="TValue"/> in the cache for the specified <paramref name="key"/>: if not there, the <paramref name="defaultValue"/> will be returned.
            </summary>
            <typeparam name="TValue">The type of the value in the cache.</typeparam>
            <param name="cache">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCache"/> instance.</param>
            <param name="key">The cache key which identifies the entry in the cache.</param>
            <param name="defaultValue">The default value to return if the value for the given <paramref name="key"/> is not in the cache.</param>
            <param name="setupAction">The setup action used to further configure the newly created <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions"/> object, automatically created by duplicating <see cref="P:ZiggyCreatures.Caching.Fusion.IFusionCache.DefaultEntryOptions"/>.</param>
            <param name="token">An optional <see cref="T:System.Threading.CancellationToken"/> to cancel the operation.</param>
            <returns>The value in the cache or the <paramref name="defaultValue"/> .</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheExtMethods.GetOrDefaultAsync``1(ZiggyCreatures.Caching.Fusion.IFusionCache,System.String,``0,System.Action{ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions},System.Threading.CancellationToken)">
            <summary>
            Get the value of type <typeparamref name="TValue"/> in the cache for the specified <paramref name="key"/>: if not there, the <paramref name="defaultValue"/> will be returned.
            </summary>
            <typeparam name="TValue">The type of the value in the cache.</typeparam>
            <param name="cache">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCache"/> instance.</param>
            <param name="key">The cache key which identifies the entry in the cache.</param>
            <param name="defaultValue">The default value to return if the value for the given <paramref name="key"/> is not in the cache.</param>
            <param name="setupAction">The setup action used to further configure the newly created <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions"/> object, automatically created by duplicating <see cref="P:ZiggyCreatures.Caching.Fusion.IFusionCache.DefaultEntryOptions"/>.</param>
            <param name="token">An optional <see cref="T:System.Threading.CancellationToken"/> to cancel the operation.</param>
            <returns>The value in the cache or the <paramref name="defaultValue"/> .</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheExtMethods.GetOrDefault``1(ZiggyCreatures.Caching.Fusion.IFusionCache,System.String,``0,System.Action{ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions},System.Threading.CancellationToken)">
            <summary>
            Get the value of type <typeparamref name="TValue"/> in the cache for the specified <paramref name="key"/>: if not there, the <paramref name="defaultValue"/> will be returned.
            </summary>
            <typeparam name="TValue">The type of the value in the cache.</typeparam>
            <param name="cache">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCache"/> instance.</param>
            <param name="key">The cache key which identifies the entry in the cache.</param>
            <param name="defaultValue">The default value to return if the value for the given <paramref name="key"/> is not in the cache.</param>
            <param name="setupAction">The setup action used to further configure the newly created <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions"/> object, automatically created by duplicating <see cref="P:ZiggyCreatures.Caching.Fusion.IFusionCache.DefaultEntryOptions"/>.</param>
            <param name="token">An optional <see cref="T:System.Threading.CancellationToken"/> to cancel the operation.</param>
            <returns>The value in the cache or the <paramref name="defaultValue"/> .</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheExtMethods.TryGetAsync``1(ZiggyCreatures.Caching.Fusion.IFusionCache,System.String,System.Action{ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions},System.Threading.CancellationToken)">
            <summary>
            Try to get the value of type <typeparamref name="TValue"/> in the cache for the specified <paramref name="key"/> and returns a <see cref="T:ZiggyCreatures.Caching.Fusion.MaybeValue`1"/> instance.
            </summary>
            <typeparam name="TValue">The type of the value in the cache.</typeparam>
            <param name="cache">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCache"/> instance.</param>
            <param name="key">The cache key which identifies the entry in the cache.</param>
            <param name="setupAction">The setup action used to further configure the newly created <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions"/> object, automatically created by duplicating <see cref="P:ZiggyCreatures.Caching.Fusion.IFusionCache.DefaultEntryOptions"/>.</param>
            <param name="token">An optional <see cref="T:System.Threading.CancellationToken"/> to cancel the operation.</param>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheExtMethods.TryGet``1(ZiggyCreatures.Caching.Fusion.IFusionCache,System.String,System.Action{ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions},System.Threading.CancellationToken)">
            <summary>
            Try to get the value of type <typeparamref name="TValue"/> in the cache for the specified <paramref name="key"/> and returns a <see cref="T:ZiggyCreatures.Caching.Fusion.MaybeValue`1"/> instance.
            </summary>
            <typeparam name="TValue">The type of the value in the cache.</typeparam>
            <param name="cache">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCache"/> instance.</param>
            <param name="key">The cache key which identifies the entry in the cache.</param>
            <param name="setupAction">The setup action used to further configure the newly created <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions"/> object, automatically created by duplicating <see cref="P:ZiggyCreatures.Caching.Fusion.IFusionCache.DefaultEntryOptions"/>.</param>
            <param name="token">An optional <see cref="T:System.Threading.CancellationToken"/> to cancel the operation.</param>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheExtMethods.SetAsync``1(ZiggyCreatures.Caching.Fusion.IFusionCache,System.String,``0,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Put the <paramref name="value"/> in the cache for the specified <paramref name="key"/> with the provided <paramref name="duration"/>. If a value is already there it will be overwritten.
            </summary>
            <typeparam name="TValue">The type of the value in the cache.</typeparam>
            <param name="cache">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCache"/> instance.</param>
            <param name="key">The cache key which identifies the entry in the cache.</param>
            <param name="value">The value to put in the cache.</param>
            <param name="duration">The value for the newly created <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.Duration"/> property, automatically created by duplicating <see cref="P:ZiggyCreatures.Caching.Fusion.IFusionCache.DefaultEntryOptions"/>.</param>
            <param name="token">An optional <see cref="T:System.Threading.CancellationToken"/> to cancel the operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> to await the completion of the operation.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheExtMethods.Set``1(ZiggyCreatures.Caching.Fusion.IFusionCache,System.String,``0,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Put the <paramref name="value"/> in the cache for the specified <paramref name="key"/> with the provided <paramref name="duration"/>. If a value is already there it will be overwritten.
            </summary>
            <typeparam name="TValue">The type of the value in the cache.</typeparam>
            <param name="cache">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCache"/> instance.</param>
            <param name="key">The cache key which identifies the entry in the cache.</param>
            <param name="value">The value to put in the cache.</param>
            <param name="duration">The value for the newly created <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.Duration"/> property, automatically created by duplicating <see cref="P:ZiggyCreatures.Caching.Fusion.IFusionCache.DefaultEntryOptions"/>.</param>
            <param name="token">An optional <see cref="T:System.Threading.CancellationToken"/> to cancel the operation.</param>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheExtMethods.SetAsync``1(ZiggyCreatures.Caching.Fusion.IFusionCache,System.String,``0,System.Action{ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions},System.Threading.CancellationToken)">
            <summary>
            Put the <paramref name="value"/> in the cache for the specified <paramref name="key"/> with the <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions"/> resulting by calling the provided <paramref name="setupAction"/> lambda. If a value is already there it will be overwritten.
            </summary>
            <typeparam name="TValue">The type of the value in the cache.</typeparam>
            <param name="cache">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCache"/> instance.</param>
            <param name="key">The cache key which identifies the entry in the cache.</param>
            <param name="value">The value to put in the cache.</param>
            <param name="setupAction">The setup action used to further configure the newly created <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions"/> object, automatically created by duplicating <see cref="P:ZiggyCreatures.Caching.Fusion.IFusionCache.DefaultEntryOptions"/>.</param>
            <param name="token">An optional <see cref="T:System.Threading.CancellationToken"/> to cancel the operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> to await the completion of the operation.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheExtMethods.Set``1(ZiggyCreatures.Caching.Fusion.IFusionCache,System.String,``0,System.Action{ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions},System.Threading.CancellationToken)">
            <summary>
            Put the <paramref name="value"/> in the cache for the specified <paramref name="key"/> with the <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions"/> resulting by calling the provided <paramref name="setupAction"/> lambda. If a value is already there it will be overwritten.
            </summary>
            <typeparam name="TValue">The type of the value in the cache.</typeparam>
            <param name="cache">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCache"/> instance.</param>
            <param name="key">The cache key which identifies the entry in the cache.</param>
            <param name="value">The value to put in the cache.</param>
            <param name="setupAction">The setup action used to further configure the newly created <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions"/> object, automatically created by duplicating <see cref="P:ZiggyCreatures.Caching.Fusion.IFusionCache.DefaultEntryOptions"/>.</param>
            <param name="token">An optional <see cref="T:System.Threading.CancellationToken"/> to cancel the operation.</param>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheExtMethods.RemoveAsync(ZiggyCreatures.Caching.Fusion.IFusionCache,System.String,System.Action{ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions},System.Threading.CancellationToken)">
            <summary>
            Removes the value in the cache for the specified <paramref name="key"/>.
            </summary>
            <param name="cache">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCache"/> instance.</param>
            <param name="key">The cache key which identifies the entry in the cache.</param>
            <param name="setupAction">The setup action used to further configure the newly created <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions"/> object, automatically created by duplicating <see cref="P:ZiggyCreatures.Caching.Fusion.IFusionCache.DefaultEntryOptions"/>.</param>
            <param name="token">An optional <see cref="T:System.Threading.CancellationToken"/> to cancel the operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> to await the completion of the operation.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheExtMethods.Remove(ZiggyCreatures.Caching.Fusion.IFusionCache,System.String,System.Action{ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions},System.Threading.CancellationToken)">
            <summary>
            Removes the value in the cache for the specified <paramref name="key"/>.
            </summary>
            <param name="cache">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCache"/> instance.</param>
            <param name="key">The cache key which identifies the entry in the cache.</param>
            <param name="setupAction">The setup action used to further configure the newly created <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions"/> object, automatically created by duplicating <see cref="P:ZiggyCreatures.Caching.Fusion.IFusionCache.DefaultEntryOptions"/>.</param>
            <param name="token">An optional <see cref="T:System.Threading.CancellationToken"/> to cancel the operation.</param>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheExtMethods.ExpireAsync(ZiggyCreatures.Caching.Fusion.IFusionCache,System.String,System.Action{ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions},System.Threading.CancellationToken)">
            <summary>
            Expires the cache entry for the specified <paramref name="key"/>.
            <br/>
            <br/>
            In the memory cache:
            <br/>
            - if fail-safe is enabled: the entry will marked as logically expired, but will still be available as a fallback value in case of future problems
            <br/>
            - if fail-safe is disabled: the entry will be effectively removed
            <br/>
            <br/>
            In the distributed cache (if any), the entry will be effectively removed.
            </summary>
            <param name="cache">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCache"/> instance.</param>
            <param name="key">The cache key which identifies the entry in the cache.</param>
            <param name="setupAction">The setup action used to further configure the newly created <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions"/> object, automatically created by duplicating <see cref="P:ZiggyCreatures.Caching.Fusion.IFusionCache.DefaultEntryOptions"/>.</param>
            <param name="token">An optional <see cref="T:System.Threading.CancellationToken"/> to cancel the operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> to await the completion of the operation.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheExtMethods.Expire(ZiggyCreatures.Caching.Fusion.IFusionCache,System.String,System.Action{ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions},System.Threading.CancellationToken)">
            <summary>
            Expires the cache entry for the specified <paramref name="key"/>.
            <br/>
            <br/>
            In the memory cache:
            <br/>
            - if fail-safe is enabled: the entry will marked as logically expired, but will still be available as a fallback value in case of future problems
            <br/>
            - if fail-safe is disabled: the entry will be effectively removed
            <br/>
            <br/>
            In the distributed cache (if any), the entry will be effectively removed.
            </summary>
            <param name="cache">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCache"/> instance.</param>
            <param name="key">The cache key which identifies the entry in the cache.</param>
            <param name="setupAction">The setup action used to further configure the newly created <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions"/> object, automatically created by duplicating <see cref="P:ZiggyCreatures.Caching.Fusion.IFusionCache.DefaultEntryOptions"/>.</param>
            <param name="token">An optional <see cref="T:System.Threading.CancellationToken"/> to cancel the operation.</param>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheExtMethods.GetDefaultCache(ZiggyCreatures.Caching.Fusion.IFusionCacheProvider)">
            <summary>
            Returns the default FusionCache instance, the one with the CacheName equals to <see cref="F:ZiggyCreatures.Caching.Fusion.FusionCacheOptions.DefaultCacheName"/>.
            </summary>
            <returns>The default FusionCache instance.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheExtMethods.GetDefaultCacheOrNull(ZiggyCreatures.Caching.Fusion.IFusionCacheProvider)">
            <summary>
            Returns the default FusionCache instance, the one with the CacheName equals to <see cref="F:ZiggyCreatures.Caching.Fusion.FusionCacheOptions.DefaultCacheName"/>, or <see langword="null"/> if none found.
            </summary>
            <returns>The default FusionCache instance.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheExtMethods.GetOrSetAsync``1(ZiggyCreatures.Caching.Fusion.IFusionCache,System.String,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},ZiggyCreatures.Caching.Fusion.MaybeValue{``0},ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions,System.Threading.CancellationToken)">
            <summary>
            Get the value of type <typeparamref name="TValue"/> in the cache for the specified <paramref name="key"/>: if not there, the <paramref name="factory"/> will be called and the returned value saved according with the <paramref name="options"/> provided.
            </summary>
            <typeparam name="TValue">The type of the value in the cache.</typeparam>
            <param name="cache">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCache"/> instance.</param>
            <param name="key">The cache key which identifies the entry in the cache.</param>
            <param name="factory">The function which will be called if the value is not found in the cache.</param>
            <param name="failSafeDefaultValue">In case fail-safe is activated and there's no stale data to use, this value will be used instead of throwing an exception.</param>
            <param name="options">The options to adhere during this operation. If null is passed, <see cref="P:ZiggyCreatures.Caching.Fusion.IFusionCache.DefaultEntryOptions"/> will be used.</param>
            <param name="token">An optional <see cref="T:System.Threading.CancellationToken"/> to cancel the operation.</param>
            <returns>The value in the cache, either already there or generated using the provided <paramref name="factory"/> .</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheExtMethods.GetOrSet``1(ZiggyCreatures.Caching.Fusion.IFusionCache,System.String,System.Func{System.Threading.CancellationToken,``0},ZiggyCreatures.Caching.Fusion.MaybeValue{``0},ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions,System.Threading.CancellationToken)">
            <summary>
            Get the value of type <typeparamref name="TValue"/> in the cache for the specified <paramref name="key"/>: if not there, the <paramref name="factory"/> will be called and the returned value saved according with the <paramref name="options"/> provided.
            </summary>
            <typeparam name="TValue">The type of the value in the cache.</typeparam>
            <param name="cache">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCache"/> instance.</param>
            <param name="key">The cache key which identifies the entry in the cache.</param>
            <param name="factory">The function which will be called if the value is not found in the cache.</param>
            <param name="failSafeDefaultValue">In case fail-safe is activated and there's no stale data to use, this value will be used instead of throwing an exception.</param>
            <param name="options">The options to adhere during this operation. If null is passed, <see cref="P:ZiggyCreatures.Caching.Fusion.IFusionCache.DefaultEntryOptions"/> will be used.</param>
            <param name="token">An optional <see cref="T:System.Threading.CancellationToken"/> to cancel the operation.</param>
            <returns>The value in the cache, either already there or generated using the provided <paramref name="factory"/> .</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheExtMethods.GetOrSetAsync``1(ZiggyCreatures.Caching.Fusion.IFusionCache,System.String,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},ZiggyCreatures.Caching.Fusion.MaybeValue{``0},System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Get the value of type <typeparamref name="TValue"/> in the cache for the specified <paramref name="key"/>: if not there, the <paramref name="factory"/> will be called and the returned value saved according with the <paramref name="duration"/> provided.
            </summary>
            <typeparam name="TValue">The type of the value in the cache.</typeparam>
            <param name="cache">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCache"/> instance.</param>
            <param name="key">The cache key which identifies the entry in the cache.</param>
            <param name="factory">The function which will be called if the value is not found in the cache.</param>
            <param name="failSafeDefaultValue">In case fail-safe is activated and there's no stale data to use, this value will be used instead of throwing an exception.</param>
            <param name="duration">The value for the newly created <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.Duration"/> property, automatically created by duplicating <see cref="P:ZiggyCreatures.Caching.Fusion.IFusionCache.DefaultEntryOptions"/>.</param>
            <param name="token">An optional <see cref="T:System.Threading.CancellationToken"/> to cancel the operation.</param>
            <returns>The value in the cache, either already there or generated using the provided <paramref name="factory"/> .</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheExtMethods.GetOrSet``1(ZiggyCreatures.Caching.Fusion.IFusionCache,System.String,System.Func{System.Threading.CancellationToken,``0},ZiggyCreatures.Caching.Fusion.MaybeValue{``0},System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Get the value of type <typeparamref name="TValue"/> in the cache for the specified <paramref name="key"/>: if not there, the <paramref name="factory"/> will be called and the returned value saved according with the <paramref name="duration"/> provided.
            </summary>
            <typeparam name="TValue">The type of the value in the cache.</typeparam>
            <param name="cache">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCache"/> instance.</param>
            <param name="key">The cache key which identifies the entry in the cache.</param>
            <param name="factory">The function which will be called if the value is not found in the cache.</param>
            <param name="failSafeDefaultValue">In case fail-safe is activated and there's no stale data to use, this value will be used instead of throwing an exception.</param>
            <param name="duration">The value for the newly created <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.Duration"/> property, automatically created by duplicating <see cref="P:ZiggyCreatures.Caching.Fusion.IFusionCache.DefaultEntryOptions"/>.</param>
            <param name="token">An optional <see cref="T:System.Threading.CancellationToken"/> to cancel the operation.</param>
            <returns>The value in the cache, either already there or generated using the provided <paramref name="factory"/> .</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheExtMethods.GetOrSetAsync``1(ZiggyCreatures.Caching.Fusion.IFusionCache,System.String,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},ZiggyCreatures.Caching.Fusion.MaybeValue{``0},System.Action{ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions},System.Threading.CancellationToken)">
            <summary>
            Get the value of type <typeparamref name="TValue"/> in the cache for the specified <paramref name="key"/>: if not there, the <paramref name="factory"/> will be called and the returned value saved according with the <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions"/> resulting by calling the provided <paramref name="setupAction"/> lambda.
            </summary>
            <typeparam name="TValue">The type of the value in the cache.</typeparam>
            <param name="cache">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCache"/> instance.</param>
            <param name="key">The cache key which identifies the entry in the cache.</param>
            <param name="factory">The function which will be called if the value is not found in the cache.</param>
            <param name="failSafeDefaultValue">In case fail-safe is activated and there's no stale data to use, this value will be used instead of throwing an exception.</param>
            <param name="setupAction">The setup action used to further configure the newly created <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions"/> object, automatically created by duplicating <see cref="P:ZiggyCreatures.Caching.Fusion.IFusionCache.DefaultEntryOptions"/>.</param>
            <param name="token">An optional <see cref="T:System.Threading.CancellationToken"/> to cancel the operation.</param>
            <returns>The value in the cache, either already there or generated using the provided <paramref name="factory"/> .</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheExtMethods.GetOrSet``1(ZiggyCreatures.Caching.Fusion.IFusionCache,System.String,System.Func{System.Threading.CancellationToken,``0},ZiggyCreatures.Caching.Fusion.MaybeValue{``0},System.Action{ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions},System.Threading.CancellationToken)">
            <summary>
            Get the value of type <typeparamref name="TValue"/> in the cache for the specified <paramref name="key"/>: if not there, the <paramref name="factory"/> will be called and the returned value saved according with the <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions"/> resulting by calling the provided <paramref name="setupAction"/> lambda.
            </summary>
            <typeparam name="TValue">The type of the value in the cache.</typeparam>
            <param name="cache">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCache"/> instance.</param>
            <param name="key">The cache key which identifies the entry in the cache.</param>
            <param name="factory">The function which will be called if the value is not found in the cache.</param>
            <param name="failSafeDefaultValue">In case fail-safe is activated and there's no stale data to use, this value will be used instead of throwing an exception.</param>
            <param name="setupAction">The setup action used to further configure the newly created <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions"/> object, automatically created by duplicating <see cref="P:ZiggyCreatures.Caching.Fusion.IFusionCache.DefaultEntryOptions"/>.</param>
            <param name="token">An optional <see cref="T:System.Threading.CancellationToken"/> to cancel the operation.</param>
            <returns>The value in the cache, either already there or generated using the provided <paramref name="factory"/> .</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheExtMethods.GetOrSetAsync``1(ZiggyCreatures.Caching.Fusion.IFusionCache,System.String,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions,System.Threading.CancellationToken)">
            <summary>
            Get the value of type <typeparamref name="TValue"/> in the cache for the specified <paramref name="key"/>: if not there, the <paramref name="factory"/> will be called and the returned value saved according with the <paramref name="options"/> provided.
            </summary>
            <typeparam name="TValue">The type of the value in the cache.</typeparam>
            <param name="cache">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCache"/> instance.</param>
            <param name="key">The cache key which identifies the entry in the cache.</param>
            <param name="factory">The function which will be called if the value is not found in the cache.</param>
            <param name="options">The options to adhere during this operation. If null is passed, <see cref="P:ZiggyCreatures.Caching.Fusion.IFusionCache.DefaultEntryOptions"/> will be used.</param>
            <param name="token">An optional <see cref="T:System.Threading.CancellationToken"/> to cancel the operation.</param>
            <returns>The value in the cache, either already there or generated using the provided <paramref name="factory"/> .</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheExtMethods.GetOrSet``1(ZiggyCreatures.Caching.Fusion.IFusionCache,System.String,System.Func{System.Threading.CancellationToken,``0},ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions,System.Threading.CancellationToken)">
            <summary>
            Get the value of type <typeparamref name="TValue"/> in the cache for the specified <paramref name="key"/>: if not there, the <paramref name="factory"/> will be called and the returned value saved according with the <paramref name="options"/> provided.
            </summary>
            <typeparam name="TValue">The type of the value in the cache.</typeparam>
            <param name="cache">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCache"/> instance.</param>
            <param name="key">The cache key which identifies the entry in the cache.</param>
            <param name="factory">The function which will be called if the value is not found in the cache.</param>
            <param name="options">The options to adhere during this operation. If null is passed, <see cref="P:ZiggyCreatures.Caching.Fusion.IFusionCache.DefaultEntryOptions"/> will be used.</param>
            <param name="token">An optional <see cref="T:System.Threading.CancellationToken"/> to cancel the operation.</param>
            <returns>The value in the cache, either already there or generated using the provided <paramref name="factory"/> .</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheExtMethods.GetOrSetAsync``1(ZiggyCreatures.Caching.Fusion.IFusionCache,System.String,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Get the value of type <typeparamref name="TValue"/> in the cache for the specified <paramref name="key"/>: if not there, the <paramref name="factory"/> will be called and the returned value saved according with the <paramref name="duration"/> provided.
            </summary>
            <typeparam name="TValue">The type of the value in the cache.</typeparam>
            <param name="cache">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCache"/> instance.</param>
            <param name="key">The cache key which identifies the entry in the cache.</param>
            <param name="factory">The function which will be called if the value is not found in the cache.</param>
            <param name="duration">The value for the newly created <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.Duration"/> property, automatically created by duplicating <see cref="P:ZiggyCreatures.Caching.Fusion.IFusionCache.DefaultEntryOptions"/>.</param>
            <param name="token">An optional <see cref="T:System.Threading.CancellationToken"/> to cancel the operation.</param>
            <returns>The value in the cache, either already there or generated using the provided <paramref name="factory"/> .</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheExtMethods.GetOrSet``1(ZiggyCreatures.Caching.Fusion.IFusionCache,System.String,System.Func{System.Threading.CancellationToken,``0},System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Get the value of type <typeparamref name="TValue"/> in the cache for the specified <paramref name="key"/>: if not there, the <paramref name="factory"/> will be called and the returned value saved according with the <paramref name="duration"/> provided.
            </summary>
            <typeparam name="TValue">The type of the value in the cache.</typeparam>
            <param name="cache">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCache"/> instance.</param>
            <param name="key">The cache key which identifies the entry in the cache.</param>
            <param name="factory">The function which will be called if the value is not found in the cache.</param>
            <param name="duration">The value for the newly created <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.Duration"/> property, automatically created by duplicating <see cref="P:ZiggyCreatures.Caching.Fusion.IFusionCache.DefaultEntryOptions"/>.</param>
            <param name="token">An optional <see cref="T:System.Threading.CancellationToken"/> to cancel the operation.</param>
            <returns>The value in the cache, either already there or generated using the provided <paramref name="factory"/> .</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheExtMethods.GetOrSetAsync``1(ZiggyCreatures.Caching.Fusion.IFusionCache,System.String,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Action{ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions},System.Threading.CancellationToken)">
            <summary>
            Get the value of type <typeparamref name="TValue"/> in the cache for the specified <paramref name="key"/>: if not there, the <paramref name="factory"/> will be called and the returned value saved according with the <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions"/> resulting by calling the provided <paramref name="setupAction"/> lambda.
            </summary>
            <typeparam name="TValue">The type of the value in the cache.</typeparam>
            <param name="cache">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCache"/> instance.</param>
            <param name="key">The cache key which identifies the entry in the cache.</param>
            <param name="factory">The function which will be called if the value is not found in the cache.</param>
            <param name="setupAction">The setup action used to further configure the newly created <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions"/> object, automatically created by duplicating <see cref="P:ZiggyCreatures.Caching.Fusion.IFusionCache.DefaultEntryOptions"/>.</param>
            <param name="token">An optional <see cref="T:System.Threading.CancellationToken"/> to cancel the operation.</param>
            <returns>The value in the cache, either already there or generated using the provided <paramref name="factory"/> .</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheExtMethods.GetOrSet``1(ZiggyCreatures.Caching.Fusion.IFusionCache,System.String,System.Func{System.Threading.CancellationToken,``0},System.Action{ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions},System.Threading.CancellationToken)">
            <summary>
            Get the value of type <typeparamref name="TValue"/> in the cache for the specified <paramref name="key"/>: if not there, the <paramref name="factory"/> will be called and the returned value saved according with the <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions"/> resulting by calling the provided <paramref name="setupAction"/> lambda.
            </summary>
            <typeparam name="TValue">The type of the value in the cache.</typeparam>
            <param name="cache">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCache"/> instance.</param>
            <param name="key">The cache key which identifies the entry in the cache.</param>
            <param name="factory">The function which will be called if the value is not found in the cache.</param>
            <param name="setupAction">The setup action used to further configure the newly created <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions"/> object, automatically created by duplicating <see cref="P:ZiggyCreatures.Caching.Fusion.IFusionCache.DefaultEntryOptions"/>.</param>
            <param name="token">An optional <see cref="T:System.Threading.CancellationToken"/> to cancel the operation.</param>
            <returns>The value in the cache, either already there or generated using the provided <paramref name="factory"/> .</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheExtMethods.GetOrSetAsync``1(ZiggyCreatures.Caching.Fusion.IFusionCache,System.String,System.Func{ZiggyCreatures.Caching.Fusion.FusionCacheFactoryExecutionContext{``0},System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},ZiggyCreatures.Caching.Fusion.MaybeValue{``0},System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Get the value of type <typeparamref name="TValue"/> in the cache for the specified <paramref name="key"/>: if not there, the <paramref name="factory"/> will be called and the returned value saved according with the <paramref name="duration"/> provided.
            </summary>
            <typeparam name="TValue">The type of the value in the cache.</typeparam>
            <param name="cache">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCache"/> instance.</param>
            <param name="key">The cache key which identifies the entry in the cache.</param>
            <param name="factory">The function which will be called if the value is not found in the cache.</param>
            <param name="failSafeDefaultValue">In case fail-safe is activated and there's no stale data to use, this value will be used instead of throwing an exception.</param>
            <param name="duration">The value for the newly created <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.Duration"/> property, automatically created by duplicating <see cref="P:ZiggyCreatures.Caching.Fusion.IFusionCache.DefaultEntryOptions"/>.</param>
            <param name="token">An optional <see cref="T:System.Threading.CancellationToken"/> to cancel the operation.</param>
            <returns>The value in the cache, either already there or generated using the provided <paramref name="factory"/> .</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheExtMethods.GetOrSet``1(ZiggyCreatures.Caching.Fusion.IFusionCache,System.String,System.Func{ZiggyCreatures.Caching.Fusion.FusionCacheFactoryExecutionContext{``0},System.Threading.CancellationToken,``0},ZiggyCreatures.Caching.Fusion.MaybeValue{``0},System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Get the value of type <typeparamref name="TValue"/> in the cache for the specified <paramref name="key"/>: if not there, the <paramref name="factory"/> will be called and the returned value saved according with the <paramref name="duration"/> provided.
            </summary>
            <typeparam name="TValue">The type of the value in the cache.</typeparam>
            <param name="cache">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCache"/> instance.</param>
            <param name="key">The cache key which identifies the entry in the cache.</param>
            <param name="factory">The function which will be called if the value is not found in the cache.</param>
            <param name="failSafeDefaultValue">In case fail-safe is activated and there's no stale data to use, this value will be used instead of throwing an exception.</param>
            <param name="duration">The value for the newly created <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.Duration"/> property, automatically created by duplicating <see cref="P:ZiggyCreatures.Caching.Fusion.IFusionCache.DefaultEntryOptions"/>.</param>
            <param name="token">An optional <see cref="T:System.Threading.CancellationToken"/> to cancel the operation.</param>
            <returns>The value in the cache, either already there or generated using the provided <paramref name="factory"/> .</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheExtMethods.GetOrSetAsync``1(ZiggyCreatures.Caching.Fusion.IFusionCache,System.String,System.Func{ZiggyCreatures.Caching.Fusion.FusionCacheFactoryExecutionContext{``0},System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},ZiggyCreatures.Caching.Fusion.MaybeValue{``0},System.Action{ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions},System.Threading.CancellationToken)">
            <summary>
            Get the value of type <typeparamref name="TValue"/> in the cache for the specified <paramref name="key"/>: if not there, the <paramref name="factory"/> will be called and the returned value saved according with the <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions"/> resulting by calling the provided <paramref name="setupAction"/> lambda.
            </summary>
            <typeparam name="TValue">The type of the value in the cache.</typeparam>
            <param name="cache">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCache"/> instance.</param>
            <param name="key">The cache key which identifies the entry in the cache.</param>
            <param name="factory">The function which will be called if the value is not found in the cache.</param>
            <param name="failSafeDefaultValue">In case fail-safe is activated and there's no stale data to use, this value will be used instead of throwing an exception.</param>
            <param name="setupAction">The setup action used to further configure the newly created <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions"/> object, automatically created by duplicating <see cref="P:ZiggyCreatures.Caching.Fusion.IFusionCache.DefaultEntryOptions"/>.</param>
            <param name="token">An optional <see cref="T:System.Threading.CancellationToken"/> to cancel the operation.</param>
            <returns>The value in the cache, either already there or generated using the provided <paramref name="factory"/> .</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheExtMethods.GetOrSet``1(ZiggyCreatures.Caching.Fusion.IFusionCache,System.String,System.Func{ZiggyCreatures.Caching.Fusion.FusionCacheFactoryExecutionContext{``0},System.Threading.CancellationToken,``0},ZiggyCreatures.Caching.Fusion.MaybeValue{``0},System.Action{ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions},System.Threading.CancellationToken)">
            <summary>
            Get the value of type <typeparamref name="TValue"/> in the cache for the specified <paramref name="key"/>: if not there, the <paramref name="factory"/> will be called and the returned value saved according with the <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions"/> resulting by calling the provided <paramref name="setupAction"/> lambda.
            </summary>
            <typeparam name="TValue">The type of the value in the cache.</typeparam>
            <param name="cache">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCache"/> instance.</param>
            <param name="key">The cache key which identifies the entry in the cache.</param>
            <param name="factory">The function which will be called if the value is not found in the cache.</param>
            <param name="failSafeDefaultValue">In case fail-safe is activated and there's no stale data to use, this value will be used instead of throwing an exception.</param>
            <param name="setupAction">The setup action used to further configure the newly created <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions"/> object, automatically created by duplicating <see cref="P:ZiggyCreatures.Caching.Fusion.IFusionCache.DefaultEntryOptions"/>.</param>
            <param name="token">An optional <see cref="T:System.Threading.CancellationToken"/> to cancel the operation.</param>
            <returns>The value in the cache, either already there or generated using the provided <paramref name="factory"/> .</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheExtMethods.GetOrSetAsync``1(ZiggyCreatures.Caching.Fusion.IFusionCache,System.String,System.Func{ZiggyCreatures.Caching.Fusion.FusionCacheFactoryExecutionContext{``0},System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions,System.Threading.CancellationToken)">
            <summary>
            Get the value of type <typeparamref name="TValue"/> in the cache for the specified <paramref name="key"/>: if not there, the <paramref name="factory"/> will be called and the returned value saved according with the <paramref name="options"/> provided.
            </summary>
            <typeparam name="TValue">The type of the value in the cache.</typeparam>
            <param name="cache">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCache"/> instance.</param>
            <param name="key">The cache key which identifies the entry in the cache.</param>
            <param name="factory">The function which will be called if the value is not found in the cache.</param>
            <param name="options">The options to adhere during this operation. If null is passed, <see cref="P:ZiggyCreatures.Caching.Fusion.IFusionCache.DefaultEntryOptions"/> will be used.</param>
            <param name="token">An optional <see cref="T:System.Threading.CancellationToken"/> to cancel the operation.</param>
            <returns>The value in the cache, either already there or generated using the provided <paramref name="factory"/> .</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheExtMethods.GetOrSet``1(ZiggyCreatures.Caching.Fusion.IFusionCache,System.String,System.Func{ZiggyCreatures.Caching.Fusion.FusionCacheFactoryExecutionContext{``0},System.Threading.CancellationToken,``0},ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions,System.Threading.CancellationToken)">
            <summary>
            Get the value of type <typeparamref name="TValue"/> in the cache for the specified <paramref name="key"/>: if not there, the <paramref name="factory"/> will be called and the returned value saved according with the <paramref name="options"/> provided.
            </summary>
            <typeparam name="TValue">The type of the value in the cache.</typeparam>
            <param name="cache">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCache"/> instance.</param>
            <param name="key">The cache key which identifies the entry in the cache.</param>
            <param name="factory">The function which will be called if the value is not found in the cache.</param>
            <param name="options">The options to adhere during this operation. If null is passed, <see cref="P:ZiggyCreatures.Caching.Fusion.IFusionCache.DefaultEntryOptions"/> will be used.</param>
            <param name="token">An optional <see cref="T:System.Threading.CancellationToken"/> to cancel the operation.</param>
            <returns>The value in the cache, either already there or generated using the provided <paramref name="factory"/> .</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheExtMethods.GetOrSetAsync``1(ZiggyCreatures.Caching.Fusion.IFusionCache,System.String,System.Func{ZiggyCreatures.Caching.Fusion.FusionCacheFactoryExecutionContext{``0},System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Get the value of type <typeparamref name="TValue"/> in the cache for the specified <paramref name="key"/>: if not there, the <paramref name="factory"/> will be called and the returned value saved according with the <paramref name="duration"/> provided.
            </summary>
            <typeparam name="TValue">The type of the value in the cache.</typeparam>
            <param name="cache">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCache"/> instance.</param>
            <param name="key">The cache key which identifies the entry in the cache.</param>
            <param name="factory">The function which will be called if the value is not found in the cache.</param>
            <param name="duration">The value for the newly created <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.Duration"/> property, automatically created by duplicating <see cref="P:ZiggyCreatures.Caching.Fusion.IFusionCache.DefaultEntryOptions"/>.</param>
            <param name="token">An optional <see cref="T:System.Threading.CancellationToken"/> to cancel the operation.</param>
            <returns>The value in the cache, either already there or generated using the provided <paramref name="factory"/> .</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheExtMethods.GetOrSet``1(ZiggyCreatures.Caching.Fusion.IFusionCache,System.String,System.Func{ZiggyCreatures.Caching.Fusion.FusionCacheFactoryExecutionContext{``0},System.Threading.CancellationToken,``0},System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Get the value of type <typeparamref name="TValue"/> in the cache for the specified <paramref name="key"/>: if not there, the <paramref name="factory"/> will be called and the returned value saved according with the <paramref name="duration"/> provided.
            </summary>
            <typeparam name="TValue">The type of the value in the cache.</typeparam>
            <param name="cache">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCache"/> instance.</param>
            <param name="key">The cache key which identifies the entry in the cache.</param>
            <param name="factory">The function which will be called if the value is not found in the cache.</param>
            <param name="duration">The value for the newly created <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.Duration"/> property, automatically created by duplicating <see cref="P:ZiggyCreatures.Caching.Fusion.IFusionCache.DefaultEntryOptions"/>.</param>
            <param name="token">An optional <see cref="T:System.Threading.CancellationToken"/> to cancel the operation.</param>
            <returns>The value in the cache, either already there or generated using the provided <paramref name="factory"/> .</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheExtMethods.GetOrSetAsync``1(ZiggyCreatures.Caching.Fusion.IFusionCache,System.String,System.Func{ZiggyCreatures.Caching.Fusion.FusionCacheFactoryExecutionContext{``0},System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Action{ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions},System.Threading.CancellationToken)">
            <summary>
            Get the value of type <typeparamref name="TValue"/> in the cache for the specified <paramref name="key"/>: if not there, the <paramref name="factory"/> will be called and the returned value saved according with the <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions"/> resulting by calling the provided <paramref name="setupAction"/> lambda.
            </summary>
            <typeparam name="TValue">The type of the value in the cache.</typeparam>
            <param name="cache">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCache"/> instance.</param>
            <param name="key">The cache key which identifies the entry in the cache.</param>
            <param name="factory">The function which will be called if the value is not found in the cache.</param>
            <param name="setupAction">The setup action used to further configure the newly created <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions"/> object, automatically created by duplicating <see cref="P:ZiggyCreatures.Caching.Fusion.IFusionCache.DefaultEntryOptions"/>.</param>
            <param name="token">An optional <see cref="T:System.Threading.CancellationToken"/> to cancel the operation.</param>
            <returns>The value in the cache, either already there or generated using the provided <paramref name="factory"/> .</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheExtMethods.GetOrSet``1(ZiggyCreatures.Caching.Fusion.IFusionCache,System.String,System.Func{ZiggyCreatures.Caching.Fusion.FusionCacheFactoryExecutionContext{``0},System.Threading.CancellationToken,``0},System.Action{ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions},System.Threading.CancellationToken)">
            <summary>
            Get the value of type <typeparamref name="TValue"/> in the cache for the specified <paramref name="key"/>: if not there, the <paramref name="factory"/> will be called and the returned value saved according with the <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions"/> resulting by calling the provided <paramref name="setupAction"/> lambda.
            </summary>
            <typeparam name="TValue">The type of the value in the cache.</typeparam>
            <param name="cache">The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCache"/> instance.</param>
            <param name="key">The cache key which identifies the entry in the cache.</param>
            <param name="factory">The function which will be called if the value is not found in the cache.</param>
            <param name="setupAction">The setup action used to further configure the newly created <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions"/> object, automatically created by duplicating <see cref="P:ZiggyCreatures.Caching.Fusion.IFusionCache.DefaultEntryOptions"/>.</param>
            <param name="token">An optional <see cref="T:System.Threading.CancellationToken"/> to cancel the operation.</param>
            <returns>The value in the cache, either already there or generated using the provided <paramref name="factory"/> .</returns>
        </member>
        <member name="T:ZiggyCreatures.Caching.Fusion.FusionCacheFactoryExecutionContext`1">
            <summary>
            Models the execution context passed to a FusionCache factory. Right now it just contains the options so they can be modified based of the factory execution (see adaptive caching), but in the future this may contain more.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheFactoryExecutionContext`1.Options">
            <summary>
            The options currently used, and that can be modified or changed completely.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheFactoryExecutionContext`1.StaleValue">
            <summary>
            The stale value, maybe.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheFactoryExecutionContext`1.HasStaleValue">
            <summary>
            Indicates if there is a cached stale value.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheFactoryExecutionContext`1.ETag">
            <summary>
            If provided, it's the ETag of the entry: this may be used in the next refresh cycle (eg: with the use of the "If-None-Match" header in an http request) to check if the entry is changed, to avoid getting the entire value.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheFactoryExecutionContext`1.HasETag">
            <summary>
            Indicates if there is an ETag value for the cached value.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheFactoryExecutionContext`1.LastModified">
            <summary>
            If provided, it's the last modified date of the entry: this may be used in the next refresh cycle (eg: with the use of the "If-Modified-Since" header in an http request) to check if the entry is changed, to avoid getting the entire value.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheFactoryExecutionContext`1.HasLastModified">
            <summary>
            Indicates if there is a LastModified value for the cached value.
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheFactoryExecutionContext`1.NotModified">
            <summary>
            For when the value is not modified, so that the stale value can be automatically returned.
            </summary>
            <returns>The stale value, for when it is not changed.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheFactoryExecutionContext`1.Modified(`0,System.String,System.Nullable{System.DateTimeOffset})">
            <summary>
            For when the value is modified, so that the new value can be returned and cached, along with the ETag and/or the LastModified values.
            </summary>
            <param name="value">The new value.</param>
            <param name="etag">The new value for the <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheFactoryExecutionContext`1.ETag"/> property.</param>
            <param name="lastModified">The new value for the <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheFactoryExecutionContext`1.LastModified"/> property.</param>
            <returns>The new value to be cached.</returns>
        </member>
        <member name="T:ZiggyCreatures.Caching.Fusion.FusionCacheGlobalDefaults">
            <summary>
            Contains the default values used globally.
            <br/><br/>
            <strong>NOTE:</strong> since these values are used *globally*, they should be changed only as a last resort, and if you *really* know what you are doing.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheGlobalDefaults.EntryOptionsDuration">
            <summary>
            The global default <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.Duration"/>.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheGlobalDefaults.EntryOptionsLockTimeout">
            <summary>
            The global default <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.LockTimeout"/>.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheGlobalDefaults.EntryOptionsJitterMaxDuration">
            <summary>
            The global default <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.JitterMaxDuration"/>.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheGlobalDefaults.EntryOptionsSize">
            <summary>
            The global default <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.Size"/>.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheGlobalDefaults.EntryOptionsPriority">
            <summary>
            The global default <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.Priority"/>.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheGlobalDefaults.EntryOptionsFactorySoftTimeout">
            <summary>
            The global default <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.FactorySoftTimeout"/>.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheGlobalDefaults.EntryOptionsFactoryHardTimeout">
            <summary>
            The global default <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.FactoryHardTimeout"/>.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheGlobalDefaults.EntryOptionsAllowTimedOutFactoryBackgroundCompletion">
            <summary>
            The global default <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.AllowTimedOutFactoryBackgroundCompletion"/>.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheGlobalDefaults.EntryOptionsDistributedCacheDuration">
            <summary>
            The global default <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.DistributedCacheDuration"/>.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheGlobalDefaults.EntryOptionsDistributedCacheFailSafeMaxDuration">
            <summary>
            The global default <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.DistributedCacheFailSafeMaxDuration"/>.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheGlobalDefaults.EntryOptionsDistributedCacheSoftTimeout">
            <summary>
            The global default <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.DistributedCacheSoftTimeout"/>.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheGlobalDefaults.EntryOptionsDistributedCacheHardTimeout">
            <summary>
            The global default <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.DistributedCacheHardTimeout"/>.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheGlobalDefaults.EntryOptionsAllowBackgroundDistributedCacheOperations">
            <summary>
            The global default <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.AllowBackgroundDistributedCacheOperations"/>.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheGlobalDefaults.EntryOptionsReThrowDistributedCacheExceptions">
            <summary>
            The global default <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.ReThrowDistributedCacheExceptions"/>.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheGlobalDefaults.EntryOptionsReThrowSerializationExceptions">
            <summary>
            The global default <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.ReThrowSerializationExceptions"/>.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheGlobalDefaults.EntryOptionsIsFailSafeEnabled">
            <summary>
            The global default <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.IsFailSafeEnabled"/>.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheGlobalDefaults.EntryOptionsFailSafeMaxDuration">
            <summary>
            The global default <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.FailSafeMaxDuration"/>.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheGlobalDefaults.EntryOptionsFailSafeThrottleDuration">
            <summary>
            The global default <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.FailSafeThrottleDuration"/>.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheGlobalDefaults.EntryOptionsSkipBackplaneNotifications">
            <summary>
            The global default <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.SkipBackplaneNotifications"/>.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheGlobalDefaults.EntryOptionsAllowBackgroundBackplaneOperations">
            <summary>
            The global default <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.AllowBackgroundBackplaneOperations"/>.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheGlobalDefaults.EntryOptionsReThrowBackplaneExceptions">
            <summary>
            The global default <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.ReThrowBackplaneExceptions"/>.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheGlobalDefaults.EntryOptionsSkipDistributedCache">
            <summary>
            The global default <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.SkipDistributedCache"/>.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheGlobalDefaults.EntryOptionsSkipDistributedCacheReadWhenStale">
            <summary>
            The global default <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.SkipDistributedCacheReadWhenStale"/>.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheGlobalDefaults.EntryOptionsSkipMemoryCache">
            <summary>
            The global default <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.SkipMemoryCache"/>.
            </summary>
        </member>
        <member name="T:ZiggyCreatures.Caching.Fusion.FusionCacheOptions">
            <summary>
            Represents all the options available for the entire <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCache"/> instance.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/Options.md"/>
            </summary>
        </member>
        <member name="F:ZiggyCreatures.Caching.Fusion.FusionCacheOptions.DefaultCacheName">
            <summary>
            The default value for <see cref="P:ZiggyCreatures.Caching.Fusion.IFusionCache.CacheName"/>.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/NamedCaches.md"/>
            </summary>
        </member>
        <member name="F:ZiggyCreatures.Caching.Fusion.FusionCacheOptions.DistributedCacheWireFormatVersion">
            <summary>
            The wire format version identifier for the distributed cache wire format, used in the cache key processing.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/CacheLevels.md"/>
            </summary>
        </member>
        <member name="F:ZiggyCreatures.Caching.Fusion.FusionCacheOptions.DistributedCacheWireFormatSeparator">
            <summary>
            The wire format version separator for the distributed cache wire format, used in the cache key processing.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/CacheLevels.md"/>
            </summary>
        </member>
        <member name="F:ZiggyCreatures.Caching.Fusion.FusionCacheOptions.BackplaneWireFormatVersion">
            <summary>
            The wire format version identifier for the backplane wire format, used in the channel name.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/Backplane.md"/>
            </summary>
        </member>
        <member name="F:ZiggyCreatures.Caching.Fusion.FusionCacheOptions.BackplaneWireFormatSeparator">
            <summary>
            The wire format version separator for the backplane wire format, used in the channel name.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/Backplane.md"/>
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheOptions.#ctor">
            <summary>
            Creates a new instance of a <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheOptions"/> object.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheOptions.CacheName">
            <summary>
            The name of the cache: it can be used for identification, and in a multi-node scenario it is typically shared between nodes to create a logical association.
            <br/><br/>
            <strong>NOTE:</strong> if you try to set this to a null/whitespace value, that value will be ignored.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/NamedCaches.md"/>
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheOptions.InstanceId">
            <summary>
            The instance id of the cache: it will be used for low-level identification for the same logical cache between different nodes in a multi-node scenario: it is automatically set to a random value.
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheOptions.SetInstanceId(System.String)">
            <summary>
            Set the InstanceId of the cache, but please don't use this.
            <br/><br/>
            <strong>⚠ WARNING:</strong> again, this should NOT be set, basically never ever, unless you really know what you are doing. For example by using the same value for two different cache instances they will be considered as the same cache, and this will lead to critical errors. So again, really: you should not use this.
            </summary>
            <param name="instanceId"></param>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheOptions.DefaultEntryOptions">
            <summary>
            The default <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions"/> to use when none will be specified, and as the starting point when duplicating one.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/Options.md"/>
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if an attempt is made to set this property to <see langword="null"/>.</exception>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheOptions.DistributedCacheCircuitBreakerDuration">
            <summary>
            The duration of the circuit-breaker used when working with the distributed cache. Defaults to <see cref="F:System.TimeSpan.Zero"/>, which means the circuit-breaker will never be activated.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/CacheLevels.md"/>
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheOptions.EnableSyncEventHandlersExecution">
            <summary>
            Execute event handlers in a sync fashion, waiting for all of them to complete before moving on.
            <br/><br/>
            <strong>WARNING:</strong> by default this option is NOT enabled, and should remain this way in any normal circumstance unless you really know what you are doing.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/Events.md"/>
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheOptions.CacheKeyPrefix">
            <summary>
            A prefix that will be added to each cache key for each call: it can be useful when working with multiple named caches.
            <br/><br/>
            <strong>EXAMPLE</strong>: if the CacheKeyPrefix specified is "MyCache:", a later call to cache.GetOrDefault("Product/123") will actually work on the cache key "MyCache:Product/123".
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/NamedCaches.md"/>
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheOptions.DistributedCacheKeyModifierMode">
            <summary>
            Specify the mode in which cache key will be changed for the distributed cache, for internal purposes (eg: to specify the wire format version).
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/CacheLevels.md"/>
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheOptions.BackplaneCircuitBreakerDuration">
            <summary>
            The duration of the circuit-breaker used when working with the backplane. Defaults to <see cref="F:System.TimeSpan.Zero"/>, which means the circuit-breaker will never be activated.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/Backplane.md"/>
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheOptions.BackplaneChannelPrefix">
            <summary>
            The prefix to use in the backplane channel name: if not specified the <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheOptions.CacheName"/> will be used.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/Backplane.md"/>
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheOptions.IgnoreIncomingBackplaneNotifications">
            <summary>
            Ignores incoming backplane notifications, which normally is DANGEROUS.
            <br/><br/>
            <strong>WARNING:</strong> it is advised not to ignore backplane notifications in any normal circumstance unless you really know what you are doing.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/Backplane.md"/>
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheOptions.EnableBackplaneAutoRecovery">
            <summary>
            DEPRECATED: please use EnableAutoRecovery.
            <br/><br/>
            Enable auto-recovery for the backplane notifications to better handle transient errors without generating synchronization issues: notifications that failed to be sent out will be retried later on, when the backplane becomes responsive again.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/AutoRecovery.md"/>
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheOptions.EnableAutoRecovery">
            <summary>
            Enable auto-recovery to automatically handle transient errors to minimize synchronization issues.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/AutoRecovery.md"/>
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheOptions.BackplaneAutoRecoveryMaxItems">
            <summary>
            DEPRECATED: please use AutoRecoveryMaxItems.
            <br/><br/>
            The maximum number of items in the auto-recovery queue: this can help reducing memory consumption. If set to <see langword="null"/> there will be no limit.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/AutoRecovery.md"/>
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheOptions.AutoRecoveryMaxItems">
            <summary>
            The maximum number of items in the auto-recovery queue: this is usually not needed, but it may help reducing memory consumption in extreme scenarios.
            <br/>
            When set to null <see langword="null"/> there will be no limits.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/AutoRecovery.md"/>
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheOptions.BackplaneAutoRecoveryMaxRetryCount">
            <summary>
            DEPRECATED: please use AutoRecoveryMaxRetryCount.
            <br/><br/>
            The maximum number of retries for a auto-recovery item: after this amount the item is discarded, to avoid keeping it retrying forever. If set to <see langword="null"/> there will be no limit.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/AutoRecovery.md"/>
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheOptions.AutoRecoveryMaxRetryCount">
            <summary>
            The maximum number of retries for a auto-recovery item: after this amount an item is discarded, to avoid keeping it for too long.
            Please note though that a cleanup is automatically performed, so in theory there's no need to set this.
            <br/>
            When set to <see langword="null"/> there will be no limits.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/AutoRecovery.md"/>
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheOptions.BackplaneAutoRecoveryReconnectDelay">
            <summary>
            DEPRECATED: please use AutoRecoveryDelay.
            <br/><br/>
            The amount of time to wait, after a backplane reconnection, before trying to process the auto-recovery queue: this may be useful to allow all the other nodes to be ready.
            <br/>
            Use <see cref="F:System.TimeSpan.Zero"/> to avoid any delay (risky).
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/Backplane.md"/>
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheOptions.BackplaneAutoRecoveryDelay">
            <summary>
            DEPRECATED: please use AutoRecoveryDelay.
            <br/><br/>
            The amount of time to wait before actually processing the auto-recovery queue, to better handle backpressure.
            <br/>
            Use <see cref="F:System.TimeSpan.Zero"/> to avoid any delay (risky).
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/AutoRecovery.md"/>
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheOptions.AutoRecoveryDelay">
            <summary>
            The amount of time to wait before actually processing the auto-recovery queue, to better handle backpressure.
            <br/>
            Use <see cref="F:System.TimeSpan.Zero"/> to avoid any delay (risky, like very very risky).
            <br/><br/>
            <strong>NOTE:</strong> when used with a distributed cache that supports a delayed reconnection logic (like StackExchange.Redis), set this to a higher value than the one used by the distributed cache, to avoid sending backplane notifications when not all nodes are reconnected yet, therefore avoiding that some nodes will not receive all the notifications.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/AutoRecovery.md"/>
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheOptions.EnableDistributedExpireOnBackplaneAutoRecovery">
            <summary>
            Enable expiring a cache entry, only on the distributed cache (if any), when an auto-recovery message is being published on the backplane, to ensure that the value in the distributed cache will not be stale.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/AutoRecovery.md"/>
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheOptions.ReThrowOriginalExceptions">
            <summary>
            If enabled, and re-throwing of exceptions is also enabled (see <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.ReThrowSerializationExceptions"/>, <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.ReThrowDistributedCacheExceptions"/> or  <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.ReThrowBackplaneExceptions"/>), it will re-throw the original exception as-is instead of wrapping it into one of the available specific exceptions (<see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheSerializationException"/>, <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheDistributedCacheException"/> or <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheBackplaneException"/>).
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheOptions.IncoherentOptionsNormalizationLogLevel">
            <summary>
            Specify the <see cref="T:Microsoft.Extensions.Logging.LogLevel"/> to use when some options have incoherent values that have been fixed with a normalization, like for example when a FailSafeMaxDuration is lower than a Duration, so the Duration is used instead.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/Logging.md"/>
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheOptions.SerializationErrorsLogLevel">
            <summary>
            Specify the <see cref="T:Microsoft.Extensions.Logging.LogLevel"/> to use when an error occurs during serialization or deserialization while working with the distributed cache.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/Logging.md"/>
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheOptions.DistributedCacheSyntheticTimeoutsLogLevel">
            <summary>
            Specify the <see cref="T:Microsoft.Extensions.Logging.LogLevel"/> to use when a synthetic timeout occurs during a distributed cache operation.
            <br/><br/>
            <strong>NOTE:</strong> synthetic timeouts are only related to soft/hard timeouts, and are not related to intrinsic timeout exceptions or similar that may be thrown by your distributed cache.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/Logging.md"/>
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheOptions.DistributedCacheErrorsLogLevel">
            <summary>
            Specify the <see cref="T:Microsoft.Extensions.Logging.LogLevel"/> to use when any error (except for a synthetic timeout) occurs during a distributed cache operation.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/Logging.md"/>
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheOptions.FactorySyntheticTimeoutsLogLevel">
            <summary>
            Specify the <see cref="T:Microsoft.Extensions.Logging.LogLevel"/> to use when a synthetic timeout occurs during a factory execution.
            <br/><br/>
            <strong>NOTE:</strong> synthetic timeouts are only related to soft/hard timeouts, and are not related to intrinsic timeout exceptions or similar that may be thrown by your database, services or else.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/Logging.md"/>
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheOptions.FactoryErrorsLogLevel">
            <summary>
            Specify the <see cref="T:Microsoft.Extensions.Logging.LogLevel"/> to use when any error (except for a synthetic timeout) occurs during a factory execution.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/Logging.md"/>
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheOptions.FailSafeActivationLogLevel">
            <summary>
            Specify the <see cref="T:Microsoft.Extensions.Logging.LogLevel"/> to use when a fail-safe activation occurs.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/Logging.md"/>
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheOptions.EventHandlingErrorsLogLevel">
            <summary>
            Specify the <see cref="T:Microsoft.Extensions.Logging.LogLevel"/> to use when an error occurs during the handling of an event.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/Logging.md"/>
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheOptions.BackplaneSyntheticTimeoutsLogLevel">
            <summary>
            Specify the <see cref="T:Microsoft.Extensions.Logging.LogLevel"/> to use when a synthetic timeout occurs during a backplane cache operation.
            <br/><br/>
            <strong>NOTE:</strong> synthetic timeouts are only related to soft/hard timeouts, and are not related to intrinsic timeout exceptions or similar that may be thrown by your backplane.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/Logging.md"/>
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheOptions.BackplaneErrorsLogLevel">
            <summary>
            Specify the <see cref="T:Microsoft.Extensions.Logging.LogLevel"/> to use when an error occurs during a backplane operation.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/Logging.md"/>
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheOptions.PluginsInfoLogLevel">
            <summary>
            Specify the <see cref="T:Microsoft.Extensions.Logging.LogLevel"/> to use when logging info about plugins.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/Logging.md"/>
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.FusionCacheOptions.PluginsErrorsLogLevel">
            <summary>
            Specify the <see cref="T:Microsoft.Extensions.Logging.LogLevel"/> to use when an error occurs while working with a plugin.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/Logging.md"/>
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheOptions.Duplicate">
            <summary>
            Creates a new <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheOptions"/> object by duplicating all the options of the current one.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/Options.md"/>
            </summary>
            <returns>The newly created <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheOptions"/> object.</returns>
        </member>
        <member name="T:ZiggyCreatures.Caching.Fusion.FusionCacheSerializationException">
            <summary>
            The generic exception that is thrown when a serialization error occurs: the InnerException contains the original exception.
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheSerializationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheSerializationException"/> class.
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheSerializationException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheSerializationException"/> class with a specified error message.</summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheSerializationException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheSerializationException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.FusionCacheSerializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheSerializationException"/> class with serialized data.</summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:ZiggyCreatures.Caching.Fusion.IFusionCache">
            <summary>
            The shared interface that models what a FusionCache instance can do.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.IFusionCache.CacheName">
            <summary>
            The name of the cache: it can be used for identification, and in a multi-node scenario it is typically shared between nodes to create a logical association.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.IFusionCache.InstanceId">
            <summary>
            A globally unique Id, auto-generated when a new instance is created (eg: the ctor is called), representing this specific cache instance: this will change every time a FusionCache instance is created.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.IFusionCache.DefaultEntryOptions">
            <summary>
            The default set of options that will be used either when none are provided or as a starting point for creating a new one with the fluent api.
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.IFusionCache.CreateEntryOptions(System.Action{ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions},System.Nullable{System.TimeSpan})">
            <summary>
            Creates a new <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions"/> instance by duplicating the <see cref="P:ZiggyCreatures.Caching.Fusion.IFusionCache.DefaultEntryOptions"/> and optionally applying a setup action.
            </summary>
            <param name="setupAction">An optional setup action to further configure the newly created <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions"/> instance.</param>
            <param name="duration">An optional duration to directly change the <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.Duration"/> of the newly created <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions"/> instance.</param>
            <returns>The newly created <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions"/>.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.IFusionCache.GetOrSetAsync``1(System.String,System.Func{ZiggyCreatures.Caching.Fusion.FusionCacheFactoryExecutionContext{``0},System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},ZiggyCreatures.Caching.Fusion.MaybeValue{``0},ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions,System.Threading.CancellationToken)">
            <summary>
            Get the value of type <typeparamref name="TValue"/> in the cache for the specified <paramref name="key"/>: if not there, the <paramref name="factory"/> will be called and the returned value saved according to the <paramref name="options"/> provided.
            </summary>
            <typeparam name="TValue">The type of the value in the cache.</typeparam>
            <param name="key">The cache key which identifies the entry in the cache.</param>
            <param name="factory">The function which will be called if the value is not found in the cache.</param>
            <param name="failSafeDefaultValue">In case fail-safe is activated and there's no stale data to use, this value will be used instead of throwing an exception.</param>
            <param name="options">The options to adhere during this operation. If null is passed, <see cref="P:ZiggyCreatures.Caching.Fusion.IFusionCache.DefaultEntryOptions"/> will be used.</param>
            <param name="token">An optional <see cref="T:System.Threading.CancellationToken"/> to cancel the operation.</param>
            <returns>The value in the cache, either already there or generated using the provided <paramref name="factory"/> .</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.IFusionCache.GetOrSet``1(System.String,System.Func{ZiggyCreatures.Caching.Fusion.FusionCacheFactoryExecutionContext{``0},System.Threading.CancellationToken,``0},ZiggyCreatures.Caching.Fusion.MaybeValue{``0},ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions,System.Threading.CancellationToken)">
            <summary>
            Get the value of type <typeparamref name="TValue"/> in the cache for the specified <paramref name="key"/>: if not there, the <paramref name="factory"/> will be called and the returned value saved according to the <paramref name="options"/> provided.
            </summary>
            <typeparam name="TValue">The type of the value in the cache.</typeparam>
            <param name="key">The cache key which identifies the entry in the cache.</param>
            <param name="factory">The function which will be called if the value is not found in the cache.</param>
            <param name="failSafeDefaultValue">In case fail-safe is activated and there's no stale data to use, this value will be used instead of throwing an exception.</param>
            <param name="options">The options to adhere during this operation. If null is passed, <see cref="P:ZiggyCreatures.Caching.Fusion.IFusionCache.DefaultEntryOptions"/> will be used.</param>
            <param name="token">An optional <see cref="T:System.Threading.CancellationToken"/> to cancel the operation.</param>
            <returns>The value in the cache, either already there or generated using the provided <paramref name="factory"/> .</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.IFusionCache.GetOrSetAsync``1(System.String,``0,ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions,System.Threading.CancellationToken)">
            <summary>
            Get the value of type <typeparamref name="TValue"/> in the cache for the specified <paramref name="key"/>: if not there, the <paramref name="defaultValue"/> will be saved according to the <paramref name="options"/> provided.
            </summary>
            <typeparam name="TValue">The type of the value in the cache.</typeparam>
            <param name="key">The cache key which identifies the entry in the cache.</param>
            <param name="defaultValue">In case the value is not in the cache this value will be saved and returned instead.</param>
            <param name="options">The options to adhere during this operation. If null is passed, <see cref="P:ZiggyCreatures.Caching.Fusion.IFusionCache.DefaultEntryOptions"/> will be used.</param>
            <param name="token">An optional <see cref="T:System.Threading.CancellationToken"/> to cancel the operation.</param>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.IFusionCache.GetOrSet``1(System.String,``0,ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions,System.Threading.CancellationToken)">
            <summary>
            Get the value of type <typeparamref name="TValue"/> in the cache for the specified <paramref name="key"/>: if not there, the <paramref name="defaultValue"/> will be saved according to the <paramref name="options"/> provided.
            </summary>
            <typeparam name="TValue">The type of the value in the cache.</typeparam>
            <param name="key">The cache key which identifies the entry in the cache.</param>
            <param name="defaultValue">In case the value is not in the cache this value will be saved and returned instead.</param>
            <param name="options">The options to adhere during this operation. If null is passed, <see cref="P:ZiggyCreatures.Caching.Fusion.IFusionCache.DefaultEntryOptions"/> will be used.</param>
            <param name="token">An optional <see cref="T:System.Threading.CancellationToken"/> to cancel the operation.</param>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.IFusionCache.GetOrDefaultAsync``1(System.String,``0,ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions,System.Threading.CancellationToken)">
            <summary>
            Get the value of type <typeparamref name="TValue"/> in the cache for the specified <paramref name="key"/>: if not there, the <paramref name="defaultValue"/> will be returned.
            </summary>
            <typeparam name="TValue">The type of the value in the cache.</typeparam>
            <param name="key">The cache key which identifies the entry in the cache.</param>
            <param name="defaultValue">The default value to return if the value for the given <paramref name="key"/> is not in the cache.</param>
            <param name="options">The options to adhere during this operation. If null is passed, <see cref="P:ZiggyCreatures.Caching.Fusion.IFusionCache.DefaultEntryOptions"/> will be used.</param>
            <param name="token">An optional <see cref="T:System.Threading.CancellationToken"/> to cancel the operation.</param>
            <returns>The value in the cache or the <paramref name="defaultValue"/> .</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.IFusionCache.GetOrDefault``1(System.String,``0,ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions,System.Threading.CancellationToken)">
            <summary>
            Get the value of type <typeparamref name="TValue"/> in the cache for the specified <paramref name="key"/>: if not there, the <paramref name="defaultValue"/> will be returned.
            </summary>
            <typeparam name="TValue">The type of the value in the cache.</typeparam>
            <param name="key">The cache key which identifies the entry in the cache.</param>
            <param name="defaultValue">The default value to return if the value for the given <paramref name="key"/> is not in the cache.</param>
            <param name="options">The options to adhere during this operation. If null is passed, <see cref="P:ZiggyCreatures.Caching.Fusion.IFusionCache.DefaultEntryOptions"/> will be used.</param>
            <param name="token">An optional <see cref="T:System.Threading.CancellationToken"/> to cancel the operation.</param>
            <returns>The value in the cache or the <paramref name="defaultValue"/> .</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.IFusionCache.TryGetAsync``1(System.String,ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions,System.Threading.CancellationToken)">
            <summary>
            Try to get the value of type <typeparamref name="TValue"/> in the cache for the specified <paramref name="key"/> and returns a <see cref="T:ZiggyCreatures.Caching.Fusion.MaybeValue`1"/> instance.
            </summary>
            <typeparam name="TValue">The type of the value in the cache.</typeparam>
            <param name="key">The cache key which identifies the entry in the cache.</param>
            <param name="options">The options to adhere during this operation. If null is passed, <see cref="P:ZiggyCreatures.Caching.Fusion.IFusionCache.DefaultEntryOptions"/> will be used.</param>
            <param name="token">An optional <see cref="T:System.Threading.CancellationToken"/> to cancel the operation.</param>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.IFusionCache.TryGet``1(System.String,ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions,System.Threading.CancellationToken)">
            <summary>
            Try to get the value of type <typeparamref name="TValue"/> in the cache for the specified <paramref name="key"/> and returns a <see cref="T:ZiggyCreatures.Caching.Fusion.MaybeValue`1"/> instance.
            </summary>
            <typeparam name="TValue">The type of the value in the cache.</typeparam>
            <param name="key">The cache key which identifies the entry in the cache.</param>
            <param name="options">The options to adhere during this operation. If null is passed, <see cref="P:ZiggyCreatures.Caching.Fusion.IFusionCache.DefaultEntryOptions"/> will be used.</param>
            <param name="token">An optional <see cref="T:System.Threading.CancellationToken"/> to cancel the operation.</param>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.IFusionCache.SetAsync``1(System.String,``0,ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions,System.Threading.CancellationToken)">
            <summary>
            Put the <paramref name="value"/> in the cache for the specified <paramref name="key"/> with the provided <paramref name="options"/>. If a value is already there it will be overwritten.
            </summary>
            <typeparam name="TValue">The type of the value in the cache.</typeparam>
            <param name="key">The cache key which identifies the entry in the cache.</param>
            <param name="value">The value to put in the cache.</param>
            <param name="options">The options to adhere during this operation. If null is passed, <see cref="P:ZiggyCreatures.Caching.Fusion.IFusionCache.DefaultEntryOptions"/> will be used.</param>
            <param name="token">An optional <see cref="T:System.Threading.CancellationToken"/> to cancel the operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> to await the completion of the operation.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.IFusionCache.Set``1(System.String,``0,ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions,System.Threading.CancellationToken)">
            <summary>
            Put the <paramref name="value"/> in the cache for the specified <paramref name="key"/> with the provided <paramref name="options"/>. If a value is already there it will be overwritten.
            </summary>
            <typeparam name="TValue">The type of the value in the cache.</typeparam>
            <param name="key">The cache key which identifies the entry in the cache.</param>
            <param name="value">The value to put in the cache.</param>
            <param name="options">The options to adhere during this operation. If null is passed, <see cref="P:ZiggyCreatures.Caching.Fusion.IFusionCache.DefaultEntryOptions"/> will be used.</param>
            <param name="token">An optional <see cref="T:System.Threading.CancellationToken"/> to cancel the operation.</param>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.IFusionCache.RemoveAsync(System.String,ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions,System.Threading.CancellationToken)">
            <summary>
            Removes the value in the cache for the specified <paramref name="key"/>.
            </summary>
            <param name="key">The cache key which identifies the entry in the cache.</param>
            <param name="options">The options to adhere during this operation. If null is passed, <see cref="P:ZiggyCreatures.Caching.Fusion.IFusionCache.DefaultEntryOptions"/> will be used.</param>
            <param name="token">An optional <see cref="T:System.Threading.CancellationToken"/> to cancel the operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> to await the completion of the operation.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.IFusionCache.Remove(System.String,ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions,System.Threading.CancellationToken)">
            <summary>
            Removes the value in the cache for the specified <paramref name="key"/>.
            </summary>
            <param name="key">The cache key which identifies the entry in the cache.</param>
            <param name="options">The options to adhere during this operation. If null is passed, <see cref="P:ZiggyCreatures.Caching.Fusion.IFusionCache.DefaultEntryOptions"/> will be used.</param>
            <param name="token">An optional <see cref="T:System.Threading.CancellationToken"/> to cancel the operation.</param>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.IFusionCache.ExpireAsync(System.String,ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions,System.Threading.CancellationToken)">
            <summary>
            Expires the cache entry for the specified <paramref name="key"/>.
            <br/>
            <br/>
            In the memory cache:
            <br/>
            - if fail-safe is enabled: the entry will marked as logically expired, but will still be available as a fallback value in case of future problems
            <br/>
            - if fail-safe is disabled: the entry will be effectively removed
            <br/>
            <br/>
            In the distributed cache (if any), the entry will be effectively removed.
            </summary>
            <param name="key">The cache key which identifies the entry in the cache.</param>
            <param name="options">The options to adhere during this operation. If null is passed, <see cref="P:ZiggyCreatures.Caching.Fusion.IFusionCache.DefaultEntryOptions"/> will be used.</param>
            <param name="token">An optional <see cref="T:System.Threading.CancellationToken"/> to cancel the operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> to await the completion of the operation.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.IFusionCache.Expire(System.String,ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions,System.Threading.CancellationToken)">
            <summary>
            Expires the cache entry for the specified <paramref name="key"/>.
            <br/>
            <br/>
            In the memory cache:
            <br/>
            - if fail-safe is enabled: the entry will marked as logically expired, but will still be available as a fallback value in case of future problems
            <br/>
            - if fail-safe is disabled: the entry will be effectively removed
            <br/>
            <br/>
            In the distributed cache (if any), the entry will be effectively removed.
            </summary>
            <param name="key">The cache key which identifies the entry in the cache.</param>
            <param name="options">The options to adhere during this operation. If null is passed, <see cref="P:ZiggyCreatures.Caching.Fusion.IFusionCache.DefaultEntryOptions"/> will be used.</param>
            <param name="token">An optional <see cref="T:System.Threading.CancellationToken"/> to cancel the operation.</param>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.IFusionCache.SetupDistributedCache(Microsoft.Extensions.Caching.Distributed.IDistributedCache,ZiggyCreatures.Caching.Fusion.Serialization.IFusionCacheSerializer)">
            <summary>
            Sets a secondary caching level, by providing an <see cref="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache"/> instance and an <see cref="T:ZiggyCreatures.Caching.Fusion.Serialization.IFusionCacheSerializer"/> instance to be used to convert from generic values to byte[] and vice versa.
            </summary>
            <param name="distributedCache">The <see cref="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache"/> instance to use.</param>
            <param name="serializer">The <see cref="T:ZiggyCreatures.Caching.Fusion.Serialization.IFusionCacheSerializer"/> instance to use.</param>
            <returns>The same <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCache"/> instance, usable in a fluent api way.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.IFusionCache.RemoveDistributedCache">
            <summary>
            Removes the secondary caching level.
            </summary>
            <returns>The same <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCache"/> instance, usable in a fluent api way.</returns>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.IFusionCache.HasDistributedCache">
            <summary>
            Gets whether there is a distributed cache configured.
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.IFusionCache.SetupBackplane(ZiggyCreatures.Caching.Fusion.Backplane.IFusionCacheBackplane)">
            <summary>
            Sets a backplane, by providing an <see cref="T:ZiggyCreatures.Caching.Fusion.Backplane.IFusionCacheBackplane"/> instance.
            </summary>
            <param name="backplane">The <see cref="T:ZiggyCreatures.Caching.Fusion.Backplane.IFusionCacheBackplane"/> instance to use.</param>
            <returns>The same <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCache"/> instance, usable in a fluent api way.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.IFusionCache.RemoveBackplane">
            <summary>
            Removes the backplane.
            </summary>
            <returns>The same <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCache"/> instance, usable in a fluent api way.</returns>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.IFusionCache.HasBackplane">
            <summary>
            Gets whether there is a backplane configured.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.IFusionCache.Events">
            <summary>
            The central place for all events handling of this FusionCache instance.
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.IFusionCache.AddPlugin(ZiggyCreatures.Caching.Fusion.Plugins.IFusionCachePlugin)">
            <summary>
            Add a plugin to this FusionCache instance, then start it.
            </summary>
            <param name="plugin">The <see cref="T:ZiggyCreatures.Caching.Fusion.Plugins.IFusionCachePlugin"/> instance.</param>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.IFusionCache.RemovePlugin(ZiggyCreatures.Caching.Fusion.Plugins.IFusionCachePlugin)">
            <summary>
            Stop a plugin, then remove it from this FusionCache instance.
            </summary>
            <param name="plugin">The <see cref="T:ZiggyCreatures.Caching.Fusion.Plugins.IFusionCachePlugin"/> instance.</param>
            <returns><see langword="true"/> if the plugin has been removed, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder">
            <summary>
            Represents an instance of a builder object to create FusionCache instances.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/DependencyInjection.md"/>
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder.CacheName">
            <summary>
            The name of the FusionCache instance.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder.UseRegisteredLogger">
            <summary>
            Indicates if the builder should try find and use an <see cref="T:Microsoft.Extensions.Logging.ILogger`1"/> service registered in the DI container.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder.Logger">
            <summary>
            A specific <see cref="T:Microsoft.Extensions.Logging.ILogger`1"/> instance to be used.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder.LoggerFactory">
            <summary>
            A factory that creates the <see cref="T:Microsoft.Extensions.Logging.ILogger`1"/> instance to be used.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder.ThrowIfMissingLogger">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/> if a logger (an instance of <see cref="T:Microsoft.Extensions.Logging.ILogger`1"/>) is not specified or is not found in the DI container.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder.UseRegisteredOptions">
            <summary>
            Indicates if the builder should try find and use an <see cref="T:Microsoft.Extensions.Options.IOptions`1"/> service registered in the DI container.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder.Options">
            <summary>
            A custom <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheOptions"/> object to be used.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder.UseCacheKeyPrefix">
            <summary>
            Indicates if the builder should use the specified <see cref="P:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder.CacheKeyPrefix"/>, overwriting the one in the options as configured.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder.CacheKeyPrefix">
            <summary>
            A prefix that will be added to each cache key for each call: it can be useful when working with multiple named caches.
            <br/><br/>
            <strong>EXAMPLE</strong>: if the CacheKeyPrefix specified is "MyCache:", a later call to cache.GetOrDefault("Product/123") will actually work on the cache key "MyCache:Product/123".
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder.SetupOptionsAction">
            <summary>
            A custom setup logic for the <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheOptions"/> object, to allow for fine-grained customization.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder.DefaultEntryOptions">
            <summary>
            A custom <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions"/> object to be used as the <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheOptions.DefaultEntryOptions"/>.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder.SetupDefaultEntryOptionsAction">
            <summary>
            A custom setup logic for the <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheOptions"/> object, to allow for fine-grained customization.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder.UseRegisteredMemoryCache">
            <summary>
            Indicates if the builder should try find and use an <see cref="T:Microsoft.Extensions.Caching.Memory.IMemoryCache"/> service registered in the DI container.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder.MemoryCache">
            <summary>
            A specific <see cref="T:Microsoft.Extensions.Caching.Memory.IMemoryCache"/> instance to be used.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder.MemoryCacheFactory">
            <summary>
            A factory that creates the <see cref="T:Microsoft.Extensions.Caching.Memory.IMemoryCache"/> instance to be used.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder.ThrowIfMissingMemoryCache">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/> if a memory cache (an instance of <see cref="T:Microsoft.Extensions.Caching.Memory.IMemoryCache"/>) is not specified or is not found in the DI container.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder.UseRegisteredMemoryLocker">
            <summary>
            Indicates if the builder should try find and use an <see cref="T:ZiggyCreatures.Caching.Fusion.Locking.IFusionCacheMemoryLocker"/> service registered in the DI container.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder.MemoryLocker">
            <summary>
            A specific <see cref="T:ZiggyCreatures.Caching.Fusion.Locking.IFusionCacheMemoryLocker"/> instance to be used.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder.MemoryLockerFactory">
            <summary>
            A factory that creates the <see cref="T:ZiggyCreatures.Caching.Fusion.Locking.IFusionCacheMemoryLocker"/> instance to be used.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder.ThrowIfMissingMemoryLocker">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/> if a memory locker (an instance of <see cref="T:ZiggyCreatures.Caching.Fusion.Locking.IFusionCacheMemoryLocker"/>) is not specified or is not found in the DI container.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder.UseRegisteredSerializer">
            <summary>
            Indicates if the builder should try find and use an <see cref="T:ZiggyCreatures.Caching.Fusion.Serialization.IFusionCacheSerializer"/> service registered in the DI container.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder.Serializer">
            <summary>
            A specific <see cref="T:ZiggyCreatures.Caching.Fusion.Serialization.IFusionCacheSerializer"/> instance to be used.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder.SerializerFactory">
            <summary>
            A factory that creates the <see cref="T:ZiggyCreatures.Caching.Fusion.Serialization.IFusionCacheSerializer"/> instance to be used.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder.ThrowIfMissingSerializer">
            <summary>
            When a distributed cache has been specified or found in the DI container, throws an <see cref="T:System.InvalidOperationException"/> if a serializer (an instance of <see cref="T:ZiggyCreatures.Caching.Fusion.Serialization.IFusionCacheSerializer"/>) is not specified or is not found in the DI container, too.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder.UseRegisteredDistributedCache">
            <summary>
            Indicates if the builder should try find and use an <see cref="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache"/> service registered in the DI container.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder.IgnoreRegisteredMemoryDistributedCache">
            <summary>
            When trying to find an <see cref="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache"/> service registered in the DI container, ignore it if it is of type <see cref="T:Microsoft.Extensions.Caching.Distributed.MemoryDistributedCache"/>, since that is not really a distributed cache and it's automatically registered by ASP.NET MVC without control from the user.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder.DistributedCache">
            <summary>
            A specific <see cref="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache"/> instance to be used.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder.DistributedCacheFactory">
            <summary>
            A factory that creates the <see cref="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache"/> instance to be used.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder.ThrowIfMissingDistributedCache">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/> if a distributed cache (an instance of <see cref="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache"/>) is not specified or is not found in the DI container.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder.UseRegisteredBackplane">
            <summary>
            Indicates if the builder should try find and use an <see cref="T:ZiggyCreatures.Caching.Fusion.Backplane.IFusionCacheBackplane"/> service registered in the DI container.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder.Backplane">
            <summary>
            A specific <see cref="T:ZiggyCreatures.Caching.Fusion.Backplane.IFusionCacheBackplane"/> instance to be used.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder.BackplaneFactory">
            <summary>
            A factory that creates the <see cref="T:ZiggyCreatures.Caching.Fusion.Backplane.IFusionCacheBackplane"/> instance to be used.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder.ThrowIfMissingBackplane">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/> if a backplane (an instance of <see cref="T:ZiggyCreatures.Caching.Fusion.Backplane.IFusionCacheBackplane"/>) is not specified or is not found in the DI container.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder.UseAllRegisteredPlugins">
            <summary>
            Indicates if the builder should try find and use any available <see cref="T:ZiggyCreatures.Caching.Fusion.Plugins.IFusionCachePlugin"/> services registered in the DI container.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder.Plugins">
            <summary>
            A specific set of <see cref="T:ZiggyCreatures.Caching.Fusion.Plugins.IFusionCachePlugin"/> instances to be used.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder.PluginsFactories">
            <summary>
            A specific set of <see cref="T:ZiggyCreatures.Caching.Fusion.Plugins.IFusionCachePlugin"/> factories to be used.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder.PostSetupAction">
            <summary>
            A custom post-setup action, that will be invoked just after the creation of the FusionCache instance, and before returning it to the caller.
            <br/><br/>
            <strong>NOTE:</strong> it is possible to add actions multiple times, to add multiple post-setup calls one after the other to combine them for a powerful result.
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder.Build(System.IServiceProvider)">
            <summary>
            Creates a new FusionCache instance, and set it up based on the configured builder options.
            </summary>
            <param name="serviceProvider">The needed <see cref="T:System.IServiceProvider"/> instance.</param>
            <returns>The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCache"/> instance created.</returns>
        </member>
        <member name="T:ZiggyCreatures.Caching.Fusion.IFusionCacheProvider">
            <summary>
            The provider to work with multiple named FusionCache instances, kinda like Microsoft's HTTP named clients (see https://learn.microsoft.com/en-us/aspnet/core/fundamentals/http-requests#named-clients)
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.IFusionCacheProvider.GetCache(System.String)">
            <summary>
            Returns the FusionCache instance with the corresponding name.
            </summary>
            <param name="cacheName">The name of the cache: it must match the one provided during registration.</param>
            <returns>The FusionCache instance corresponding to the cache name specified.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.IFusionCacheProvider.GetCacheOrNull(System.String)">
            <summary>
            Returns the FusionCache instance with the corresponding name, or <see langword="null"/> if none found.
            </summary>
            <param name="cacheName">The name of the cache: it must match the one provided during registration.</param>
            <returns>The FusionCache instance corresponding to the cache name specified.</returns>
        </member>
        <member name="T:ZiggyCreatures.Caching.Fusion.Internals.ConcurrentRandom">
            <summary>
            A thread-safe version of the Random class.
            <br/>
            Inspired by Ben Adam's ConcurrentRandom (see <a href="https://github.com/benaadams/Ben.Http/blob/main/src/Ben.Http/Random.cs">here</a>).
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Internals.ConcurrentRandom.Next">
            <summary>
            Returns a non-negative random integer that is greater than or equal to 0 and less than <see cref="F:System.Int32.MaxValue"/>.
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Internals.ConcurrentRandom.Next(System.Int32)">
            <summary>
            Returns a non-negative random integer that is less than the specified maximum.
            </summary>
            <param name="maxValue">The exclusive upper bound of the random number to be generated: must be greater than or equal to 0.</param>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Internals.ConcurrentRandom.Next(System.Int32,System.Int32)">
            <summary>
            Returns a random integer that is within a specified range.
            </summary>
            <param name="minValue">The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">The exclusive upper bound of the random number returned: <paramref name="maxValue"/> must be greater than or equal to <paramref name="minValue"/>.</param>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Internals.ConcurrentRandom.NextInt64(System.Int64)">
            <summary>
            Returns a random long that is within a specified range.
            </summary>
            <param name="maxValue">The exclusive upper bound of the random number returned: must be greater than or equal to 0.</param>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Internals.ConcurrentRandom.NextInt64(System.Int64,System.Int64)">
            <summary>
            Returns a random long that is within a specified range.
            </summary>
            <param name="minValue">The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">The exclusive upper bound of the random number returned: <paramref name="maxValue"/> must be greater than or equal to <paramref name="minValue"/>.</param>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Internals.ConcurrentRandom.NextBytes(System.Byte[])">
            <summary>
            Fills the elements of a specified array of bytes with random numbers.
            </summary>
            <param name="buffer">The array to be filled with random numbers.</param>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Internals.ConcurrentRandom.NextDouble">
            <summary>
            Returns a random floating-point number that is greater than or equal to 0.0, and less than 1.0.
            </summary>
        </member>
        <member name="T:ZiggyCreatures.Caching.Fusion.Internals.Distributed.FusionCacheDistributedEntry`1">
            <summary>
            Represents a distributed entry in <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCache"/>.
            </summary>
            <typeparam name="TValue">The type of the entry's value</typeparam>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Internals.Distributed.FusionCacheDistributedEntry`1.#ctor(`0,ZiggyCreatures.Caching.Fusion.Internals.FusionCacheEntryMetadata,System.Int64)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="value">The actual value.</param>
            <param name="metadata">The metadata for the entry.</param>
            <param name="timestamp">The original timestamp of the entry, see <see cref="P:ZiggyCreatures.Caching.Fusion.Internals.Distributed.FusionCacheDistributedEntry`1.Timestamp"/>.</param>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Internals.Distributed.FusionCacheDistributedEntry`1.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.Internals.Distributed.FusionCacheDistributedEntry`1.Value">
            <inheritdoc/>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.Internals.Distributed.FusionCacheDistributedEntry`1.Metadata">
            <inheritdoc/>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.Internals.Distributed.FusionCacheDistributedEntry`1.Timestamp">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Internals.Distributed.FusionCacheDistributedEntry`1.GetValue``1">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Internals.Distributed.FusionCacheDistributedEntry`1.SetValue``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Internals.Distributed.FusionCacheDistributedEntry`1.ToString">
            <inheritdoc/>
        </member>
        <member name="T:ZiggyCreatures.Caching.Fusion.Internals.FusionCacheEntryMetadata">
            <summary>
            Metadata for an entry in a <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCache"/> .
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Internals.FusionCacheEntryMetadata.#ctor(System.DateTimeOffset,System.Boolean,System.Nullable{System.DateTimeOffset},System.String,System.Nullable{System.DateTimeOffset})">
            <summary>
            Creates a new instance.
            </summary>
            <param name="logicalExpiration">The logical expiration of the cache entry: this is used in when the actual expiration in the cache is higher because of fail-safe.</param>
            <param name="isFromFailSafe">Indicates if the cache entry comes from a fail-safe activation, so if the value was used as a fallback because errors occurred.</param>
            <param name="lastModified">If provided, it's the last modified date of the entry: this may be used in the next refresh cycle (eg: with the use of the "If-Modified-Since" header in an http request) to check if the entry is changed, to avoid getting the entire value.</param>
            <param name="etag">If provided, it's the ETag of the entry: this may be used in the next refresh cycle (eg: with the use of the "If-None-Match" header in an http request) to check if the entry is changed, to avoid getting the entire value.</param>
            <param name="eagerExpiration">The eager expiration, based on the <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.EagerRefreshThreshold"/>.</param>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.Internals.FusionCacheEntryMetadata.LogicalExpiration">
            <summary>
            The intended expiration of the entry as requested from the caller.
            <br/>
            When fail-safe is enabled the entry is cached with a higher duration (<see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.FailSafeMaxDuration"/>) so it may be used as a fallback value in case of problems: when that happens, the LogicalExpiration is used to check if the value is stale, instead of losing it by simply let it expire in the cache.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.Internals.FusionCacheEntryMetadata.IsFromFailSafe">
            <summary>
            Indicates if the cache entry comes from a fail-safe activation, so if the value was used as a fallback because errors occurred.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.Internals.FusionCacheEntryMetadata.EagerExpiration">
            <summary>
            The eager expiration, based on the <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions.EagerRefreshThreshold"/>.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.Internals.FusionCacheEntryMetadata.ETag">
            <summary>
            If provided, it's the ETag of the entry: this may be used in the next refresh cycle (eg: with the use of the "If-None-Match" header in an http request) to check if the entry is changed, to avoid getting the entire value.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.Internals.FusionCacheEntryMetadata.LastModified">
            <summary>
            If provided, it's the last modified date of the entry: this may be used in the next refresh cycle (eg: with the use of the "If-Modified-Since" header in an http request) to check if the entry is changed, to avoid getting the entire value.
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Internals.FusionCacheEntryMetadata.IsLogicallyExpired">
            <summary>
            Checks if the entry is logically expired.
            </summary>
            <returns>A <see cref="T:System.Boolean"/> indicating the logical expiration status.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Internals.FusionCacheEntryMetadata.ShouldEagerlyRefresh">
            <summary>
            Checks if an eager refresh should happen.
            </summary>
            <returns>A <see cref="T:System.Boolean"/> indicating an eager refresh should happen.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Internals.FusionCacheEntryMetadata.ToString">
            <inheritdoc/>
        </member>
        <member name="T:ZiggyCreatures.Caching.Fusion.Internals.IFusionCacheEntry">
            <summary>
            Represents a generic entry in <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCache"/>: it can be either a <see cref="T:ZiggyCreatures.Caching.Fusion.Internals.Memory.FusionCacheMemoryEntry`1"/> or a <see cref="T:ZiggyCreatures.Caching.Fusion.Internals.Distributed.FusionCacheDistributedEntry`1"/>.
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Internals.IFusionCacheEntry.GetValue``1">
            <summary>
            Get the value inside the entry.
            </summary>
            <typeparam name="TValue">The typeof the value.</typeparam>
            <returns>The value.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Internals.IFusionCacheEntry.SetValue``1(``0)">
            <summary>
            Set the value inside the entry.
            </summary>
            <typeparam name="TValue">The typeof the value.</typeparam>
            <param name="value">The value.</param>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.Internals.IFusionCacheEntry.Metadata">
            <summary>
            Metadata about the cache entry.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.Internals.IFusionCacheEntry.Timestamp">
            <summary>
            The timestamp (in ticks) at which the cached value has been originally created: memory cache entries created from distributed cache entries will have the exact same timestamp.
            </summary>
        </member>
        <member name="T:ZiggyCreatures.Caching.Fusion.Internals.Memory.FusionCacheMemoryEntry`1">
            <summary>
            Represents a memory entry in <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCache"/>, which can be either a <see cref="T:ZiggyCreatures.Caching.Fusion.Internals.Memory.FusionCacheMemoryEntry`1"/> or a <see cref="T:ZiggyCreatures.Caching.Fusion.Internals.Distributed.FusionCacheDistributedEntry`1"/>.
            </summary>
        </member>
        <member name="T:ZiggyCreatures.Caching.Fusion.Internals.Memory.IFusionCacheMemoryEntry">
            <summary>
            Represents a memory entry in <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCache"/>, but as a non-generic interface so it can be used from code that doesn't know the actual type of the value (eg: auto-recovery and other places).
            </summary>
        </member>
        <member name="T:ZiggyCreatures.Caching.Fusion.Internals.RunUtils">
            <summary>
            A set of utility methods to deal with sync/async execution of actions/functions, with support for timeouts, fire-and-forget execution, etc.
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Internals.RunUtils.RunAsyncFuncWithTimeoutAsync``1(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.TimeSpan,System.Boolean,System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <summary>
            Run an async function asynchronously with a timeout and some additional options.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="asyncFunc">The async function to execute.</param>
            <param name="timeout">The timeout to apply.</param>
            <param name="cancelIfTimeout">Indicates if the action should be cancelled in case of a timeout.</param>
            <param name="timedOutTaskProcessor">A lambda to process the task representing the eventually timed out function.</param>
            <param name="token">An optional <see cref="T:System.Threading.CancellationToken"/> to cancel the operation.</param>
            <returns>The resulting <see cref="T:System.Threading.Tasks.Task"/> to await</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Internals.RunUtils.RunAsyncActionWithTimeoutAsync(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.TimeSpan,System.Boolean,System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Run an async action asynchronously with a timeout and some additional options.
            </summary>
            <param name="asyncAction">The async action to execute.</param>
            <param name="timeout">The timeout to apply.</param>
            <param name="cancelIfTimeout">Indicates if the action should be cancelled in case of a timeout.</param>
            <param name="timedOutTaskProcessor">A lambda to process the task representing the eventually timed out action.</param>
            <param name="token">An optional <see cref="T:System.Threading.CancellationToken"/> to cancel the operation.</param>
            <returns>The resulting <see cref="T:System.Threading.Tasks.Task"/> to await</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Internals.RunUtils.RunAsyncFuncWithTimeout``1(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.TimeSpan,System.Boolean,System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <summary>
            Run an async function synchoronously with a timeout and some additional options.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="asyncFunc">The async function to execute.</param>
            <param name="timeout">The timeout to apply.</param>
            <param name="cancelIfTimeout">Indicates if the action should be cancelled in case of a timeout.</param>
            <param name="timedOutTaskProcessor">A lambda to process the task representing the eventually timed out function.</param>
            <param name="token">An optional <see cref="T:System.Threading.CancellationToken"/> to cancel the operation.</param>
            <returns>The value returned from the async function</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Internals.RunUtils.RunAsyncActionWithTimeout(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.TimeSpan,System.Boolean,System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Run an async action synchoronously with a timeout and some additional options.
            </summary>
            <param name="asyncAction">The async action to execute.</param>
            <param name="timeout">The timeout to apply.</param>
            <param name="cancelIfTimeout">Indicates if the action should be cancelled in case of a timeout.</param>
            <param name="timedOutTaskProcessor">A lambda to process the task representing the eventually timed out action.</param>
            <param name="token">An optional <see cref="T:System.Threading.CancellationToken"/> to cancel the operation.</param>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Internals.RunUtils.RunSyncFuncWithTimeout``1(System.Func{System.Threading.CancellationToken,``0},System.TimeSpan,System.Boolean,System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <summary>
            Run a sync function synchoronously with a timeout and some additional options.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="syncFunc">The sync function to execute.</param>
            <param name="timeout">The timeout to apply.</param>
            <param name="cancelIfTimeout">Indicates if the action should be cancelled in case of a timeout.</param>
            <param name="timedOutTaskProcessor">A lambda to process the task representing the eventually timed out function.</param>
            <param name="token">An optional <see cref="T:System.Threading.CancellationToken"/> to cancel the operation.</param>
            <returns>The value returned from the sync function</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Internals.RunUtils.RunSyncActionWithTimeout(System.Action{System.Threading.CancellationToken},System.TimeSpan,System.Boolean,System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Run a sync action synchoronously with a timeout and some additional ooptions.
            </summary>
            <param name="syncAction">The sync action to execute.</param>
            <param name="timeout">The timeout to apply.</param>
            <param name="cancelIfTimeout">Indicates if the action should be cancelled in case of a timeout.</param>
            <param name="timedOutTaskProcessor">A lambda to process the task representing the eventually timed out action.</param>
            <param name="token">An optional <see cref="T:System.Threading.CancellationToken"/> to cancel the operation.</param>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Internals.RunUtils.RunAsyncActionAdvancedAsync(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.TimeSpan,System.Boolean,System.Boolean,System.Action{System.Exception},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Run an async function with the ability to optionally set a timeout, await its completion (or run in a fire-and-forget way), process the eventually thrown exception or re-throw it.
            </summary>
            <param name="asyncAction">The async action to execute.</param>
            <param name="timeout">The timeout to apply.</param>
            <param name="cancelIfTimeout">Indicates if the action should be cancelled in case of a timeout.</param>
            <param name="awaitCompletion">Indicates if the function's completion should be awaited or if the execution should be made in a fire-and-forget way.</param>
            <param name="exceptionProcessor">An exception processor for the exception that may be thrown.</param>
            <param name="reThrow">Indicates if, in case an exception is intercepted, it should be re-thrown.</param>
            <param name="token">An optional <see cref="T:System.Threading.CancellationToken"/> to cancel the operation.</param>
            <returns>The resulting <see cref="T:System.Threading.Tasks.Task"/> to await</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Internals.RunUtils.RunSyncActionAdvanced(System.Action{System.Threading.CancellationToken},System.TimeSpan,System.Boolean,System.Boolean,System.Action{System.Exception},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Run a sync action with the ability to optionally set a timeout, await its completion (or run in a fire-and-forget way), process the eventually thrown exception or re-throw it.
            </summary>
            <param name="syncAction">The sync action to execute.</param>
            <param name="timeout">The timeout to apply. Defaults to <see cref="F:System.Threading.Timeout.Infinite"/>.</param>
            <param name="cancelIfTimeout">Indicates if the action should be cancelled in case of a timeout.</param>
            <param name="awaitCompletion">Indicates if the action's completion should be awaited or if the execution should be made in a fire-and-forget way.</param>
            <param name="exceptionProcessor">An exception processor for the exception that may be thrown.</param>
            <param name="reThrow">Indicates if, in case an exception is intercepted, it should be re-thrown.</param>
            <param name="token">An optional <see cref="T:System.Threading.CancellationToken"/> to cancel the operation.</param>
        </member>
        <member name="T:ZiggyCreatures.Caching.Fusion.Internals.SimpleCircuitBreaker">
            <summary>
            A simple, reusable circuit-breaker.
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Internals.SimpleCircuitBreaker.#ctor(System.TimeSpan)">
            <summary>
            Creates a new <see cref="T:ZiggyCreatures.Caching.Fusion.Internals.SimpleCircuitBreaker"/> instance.
            </summary>
            <param name="breakDuration">The amount of time the circuit will remain open, when told to.</param>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.Internals.SimpleCircuitBreaker.BreakDuration">
            <summary>
            The amount of time the circuit will remain open, when told to.
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Internals.SimpleCircuitBreaker.TryOpen(System.Boolean@)">
            <summary>
            Tries to open the circuit.
            </summary>
            <param name="isStateChanged">Indicates if the circuit has been opened with this operation.</param>
            <returns><see langword="true"/> if the circuit is open, either because it was already or because it has been opened with this operation. <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Internals.SimpleCircuitBreaker.Close(System.Boolean@)">
            <summary>
            Close the circuit.
            </summary>
            <param name="isStateChanged">Indicates if the circuit has been closed with this operation.</param>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Internals.SimpleCircuitBreaker.IsClosed(System.Boolean@)">
            <summary>
            Check if the circuit is closed, or has been closed with this operation.
            </summary>
            <param name="isStateChanged">Indicates if the circuit has been closed with this operation.</param>
            <returns><see langword="true"/> if the circuit is closed, either because it was already closed or because it has been closed with this operation. <see langword="false"/> otherwise.</returns>
        </member>
        <member name="T:ZiggyCreatures.Caching.Fusion.Locking.IFusionCacheMemoryLocker">
            <summary>
            A FusionCache component to handle acquiring and releasing memory locks in a highly optimized way.
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Locking.IFusionCacheMemoryLocker.AcquireLockAsync(System.String,System.String,System.String,System.String,System.TimeSpan,Microsoft.Extensions.Logging.ILogger,System.Threading.CancellationToken)">
            <summary>
            Acquire a generic lock, used to synchronize multiple factory operating on the same cache key, and return it.
            </summary>
            <param name="cacheName">The CacheName of the FusionCache instance.</param>
            <param name="cacheInstanceId">The InstanceId of the FusionCache instance.</param>
            <param name="operationId">The operation id which uniquely identifies a high-level cache operation.</param>
            <param name="key">The key for which to obtain a lock.</param>
            <param name="timeout">The optional timeout for the lock acquisition.</param>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> to use, if any.</param>
            <param name="token">An optional <see cref="T:System.Threading.CancellationToken"/> to cancel the operation.</param>
            <returns>The acquired generic lock object, later released when the critical section is over.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Locking.IFusionCacheMemoryLocker.AcquireLock(System.String,System.String,System.String,System.String,System.TimeSpan,Microsoft.Extensions.Logging.ILogger,System.Threading.CancellationToken)">
            <summary>
            Acquire a generic lock, used to synchronize multiple factory operating on the same cache key, and return it.
            </summary>
            <param name="cacheName">The name of the FusionCache instance.</param>
            <param name="cacheInstanceId">The InstanceId of the FusionCache instance.</param>
            <param name="operationId">The operation id which uniquely identifies a high-level cache operation.</param>
            <param name="key">The key for which to obtain a lock.</param>
            <param name="timeout">The optional timeout for the lock acquisition.</param>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> to use, if any.</param>
            <param name="token">An optional <see cref="T:System.Threading.CancellationToken"/> to cancel the operation.</param>
            <returns>The acquired generic lock object, later released when the critical section is over.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Locking.IFusionCacheMemoryLocker.ReleaseLock(System.String,System.String,System.String,System.String,System.Object,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Release the generic lock object.
            </summary>
            <param name="cacheName">The name of the FusionCache instance.</param>
            <param name="cacheInstanceId">The InstanceId of the FusionCache instance.</param>
            <param name="operationId">The operation id which uniquely identifies a high-level cache operation.</param>
            <param name="key">The key for which to obtain a lock.</param>
            <param name="lockObj">The generic lock object to release.</param>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> to use, if any.</param>
        </member>
        <member name="T:ZiggyCreatures.Caching.Fusion.Locking.ProbabilisticMemoryLocker">
            <summary>
            An implementation of <see cref="T:ZiggyCreatures.Caching.Fusion.Locking.IFusionCacheMemoryLocker"/> based on a probabilistic approach.
            <br></br>
            ⚠️ WARNING: this type of locker may lead to deadlocks, so be careful.
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Locking.ProbabilisticMemoryLocker.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ZiggyCreatures.Caching.Fusion.Locking.ProbabilisticMemoryLocker"/> class.
            </summary>
            <param name="poolSize">The size of the pool used internally.</param>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Locking.ProbabilisticMemoryLocker.AcquireLockAsync(System.String,System.String,System.String,System.String,System.TimeSpan,Microsoft.Extensions.Logging.ILogger,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Locking.ProbabilisticMemoryLocker.AcquireLock(System.String,System.String,System.String,System.String,System.TimeSpan,Microsoft.Extensions.Logging.ILogger,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Locking.ProbabilisticMemoryLocker.ReleaseLock(System.String,System.String,System.String,System.String,System.Object,Microsoft.Extensions.Logging.ILogger)">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Locking.ProbabilisticMemoryLocker.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:ZiggyCreatures.Caching.Fusion.Locking.StandardMemoryLocker">
            <summary>
            A standard implementation of <see cref="T:ZiggyCreatures.Caching.Fusion.Locking.IFusionCacheMemoryLocker"/>.
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Locking.StandardMemoryLocker.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ZiggyCreatures.Caching.Fusion.Locking.StandardMemoryLocker"/> class.
            </summary>
            <param name="size">The size of the pool used internally for the 1st level locking strategy.</param>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Locking.StandardMemoryLocker.AcquireLockAsync(System.String,System.String,System.String,System.String,System.TimeSpan,Microsoft.Extensions.Logging.ILogger,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Locking.StandardMemoryLocker.AcquireLock(System.String,System.String,System.String,System.String,System.TimeSpan,Microsoft.Extensions.Logging.ILogger,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Locking.StandardMemoryLocker.ReleaseLock(System.String,System.String,System.String,System.String,System.Object,Microsoft.Extensions.Logging.ILogger)">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Locking.StandardMemoryLocker.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:ZiggyCreatures.Caching.Fusion.MaybeValue`1">
            <summary>
            Represents maybe a value, maybe not.
            <br/>
            It contains a <see cref="T:System.Boolean"/> indicating if the value is there and, if so, the value itself.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="F:ZiggyCreatures.Caching.Fusion.MaybeValue`1.None">
            <summary>
            Represents a reusable result to be used when no value is there: using this saves memory allocations.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.MaybeValue`1.HasValue">
            <summary>
            Indicates if the value is there.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.MaybeValue`1.Value">
            <summary>
            If the value is there (you can check <see cref="P:ZiggyCreatures.Caching.Fusion.MaybeValue`1.HasValue"/> to know that) the actual value is returned, otherwise an <see cref="T:System.InvalidOperationException"/> will be thrown.
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.MaybeValue`1.GetValueOrDefault">
            <summary>
            Get the value underlying value if there, otherwise the default value of the type <typeparamref name="TValue"/>.
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.MaybeValue`1.GetValueOrDefault(`0)">
            <summary>
            Get the value underlying value if there, otherwise the provided <paramref name="defaultValue"/>.
            </summary>
            <param name="defaultValue">A value to return if the <see cref="P:ZiggyCreatures.Caching.Fusion.MaybeValue`1.HasValue"/> property is <see langword="false"/>.</param>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.MaybeValue`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.MaybeValue`1.op_Implicit(`0)~ZiggyCreatures.Caching.Fusion.MaybeValue{`0}">
            <summary>
            Implements an implicit conversion from any type of value to a <see cref="T:ZiggyCreatures.Caching.Fusion.MaybeValue`1"/> instance with that value.
            </summary>
            <param name="value">The value to convert to a <see cref="T:ZiggyCreatures.Caching.Fusion.MaybeValue`1"/> instance.</param>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.MaybeValue`1.op_Implicit(ZiggyCreatures.Caching.Fusion.MaybeValue{`0})~`0">
            <summary>
            Returns <see cref="T:ZiggyCreatures.Caching.Fusion.MaybeValue`1"/> or, if <see cref="P:ZiggyCreatures.Caching.Fusion.MaybeValue`1.HasValue"/> is <see langword="false"/>, throws an <see cref="T:System.InvalidOperationException"/> exception instead.
            </summary>
            <param name="maybe">The <see cref="T:ZiggyCreatures.Caching.Fusion.MaybeValue`1"/> instance.</param>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.MaybeValue`1.op_Equality(ZiggyCreatures.Caching.Fusion.MaybeValue{`0},ZiggyCreatures.Caching.Fusion.MaybeValue{`0})">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.MaybeValue`1.op_Inequality(ZiggyCreatures.Caching.Fusion.MaybeValue{`0},ZiggyCreatures.Caching.Fusion.MaybeValue{`0})">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.MaybeValue`1.FromValue(`0)">
            <summary>
            Creates a new <see cref="T:ZiggyCreatures.Caching.Fusion.MaybeValue`1"/> instance for a successful case by providing the <paramref name="value"/>.
            </summary>
            <param name="value">The value of type <typeparamref name="TValue"/> to use.</param>
            <returns>The newly created <see cref="T:ZiggyCreatures.Caching.Fusion.MaybeValue`1"/> instance.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.MaybeValue`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.MaybeValue`1.Equals(ZiggyCreatures.Caching.Fusion.MaybeValue{`0})">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.MaybeValue`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:ZiggyCreatures.Caching.Fusion.NullObjects.NullBackplane">
            <summary>
            An implementation of <see cref="T:ZiggyCreatures.Caching.Fusion.Backplane.IFusionCacheBackplane"/> that implements the null object pattern, meaning that it does nothing. Consider this a kind of a pass-through implementation.
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.NullObjects.NullBackplane.Publish(ZiggyCreatures.Caching.Fusion.Backplane.BackplaneMessage,ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.NullObjects.NullBackplane.PublishAsync(ZiggyCreatures.Caching.Fusion.Backplane.BackplaneMessage,ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.NullObjects.NullBackplane.Subscribe(ZiggyCreatures.Caching.Fusion.Backplane.BackplaneSubscriptionOptions)">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.NullObjects.NullBackplane.Unsubscribe">
            <inheritdoc/>
        </member>
        <member name="T:ZiggyCreatures.Caching.Fusion.NullObjects.NullDistributedCache">
            <summary>
            An implementation of <see cref="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache"/> that implements the null object pattern, meaning that it does nothing. Consider this a kind of a pass-through implementation.
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.NullObjects.NullDistributedCache.Get(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.NullObjects.NullDistributedCache.GetAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.NullObjects.NullDistributedCache.Refresh(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.NullObjects.NullDistributedCache.RefreshAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.NullObjects.NullDistributedCache.Remove(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.NullObjects.NullDistributedCache.RemoveAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.NullObjects.NullDistributedCache.Set(System.String,System.Byte[],Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions)">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.NullObjects.NullDistributedCache.SetAsync(System.String,System.Byte[],Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:ZiggyCreatures.Caching.Fusion.NullObjects.NullFusionCache">
            <summary>
            An implementation of <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCache"/> that implements the null object pattern, meaning that it does nothing. Consider this a kind of a pass-through implementation.
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.NullObjects.NullFusionCache.#ctor(Microsoft.Extensions.Options.IOptions{ZiggyCreatures.Caching.Fusion.FusionCacheOptions})">
            <summary>
            Creates a new <see cref="T:ZiggyCreatures.Caching.Fusion.NullObjects.NullFusionCache"/> instance.
            </summary>
            <param name="optionsAccessor">The set of cache-wide options to use with this instance of <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCache"/>.</param>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.NullObjects.NullFusionCache.CacheName">
            <inheritdoc/>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.NullObjects.NullFusionCache.InstanceId">
            <inheritdoc/>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.NullObjects.NullFusionCache.DefaultEntryOptions">
            <inheritdoc/>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.NullObjects.NullFusionCache.HasDistributedCache">
            <inheritdoc/>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.NullObjects.NullFusionCache.HasBackplane">
            <inheritdoc/>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.NullObjects.NullFusionCache.Events">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.NullObjects.NullFusionCache.AddPlugin(ZiggyCreatures.Caching.Fusion.Plugins.IFusionCachePlugin)">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.NullObjects.NullFusionCache.CreateEntryOptions(System.Action{ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions},System.Nullable{System.TimeSpan})">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.NullObjects.NullFusionCache.Expire(System.String,ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.NullObjects.NullFusionCache.ExpireAsync(System.String,ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.NullObjects.NullFusionCache.GetOrDefault``1(System.String,``0,ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.NullObjects.NullFusionCache.GetOrDefaultAsync``1(System.String,``0,ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.NullObjects.NullFusionCache.GetOrSet``1(System.String,System.Func{ZiggyCreatures.Caching.Fusion.FusionCacheFactoryExecutionContext{``0},System.Threading.CancellationToken,``0},ZiggyCreatures.Caching.Fusion.MaybeValue{``0},ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.NullObjects.NullFusionCache.GetOrSet``1(System.String,``0,ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.NullObjects.NullFusionCache.GetOrSetAsync``1(System.String,System.Func{ZiggyCreatures.Caching.Fusion.FusionCacheFactoryExecutionContext{``0},System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},ZiggyCreatures.Caching.Fusion.MaybeValue{``0},ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.NullObjects.NullFusionCache.GetOrSetAsync``1(System.String,``0,ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.NullObjects.NullFusionCache.Remove(System.String,ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.NullObjects.NullFusionCache.RemoveAsync(System.String,ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.NullObjects.NullFusionCache.RemoveBackplane">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.NullObjects.NullFusionCache.RemoveDistributedCache">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.NullObjects.NullFusionCache.RemovePlugin(ZiggyCreatures.Caching.Fusion.Plugins.IFusionCachePlugin)">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.NullObjects.NullFusionCache.Set``1(System.String,``0,ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.NullObjects.NullFusionCache.SetAsync``1(System.String,``0,ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.NullObjects.NullFusionCache.SetupBackplane(ZiggyCreatures.Caching.Fusion.Backplane.IFusionCacheBackplane)">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.NullObjects.NullFusionCache.SetupDistributedCache(Microsoft.Extensions.Caching.Distributed.IDistributedCache,ZiggyCreatures.Caching.Fusion.Serialization.IFusionCacheSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.NullObjects.NullFusionCache.TryGet``1(System.String,ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.NullObjects.NullFusionCache.TryGetAsync``1(System.String,ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.NullObjects.NullFusionCache.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:ZiggyCreatures.Caching.Fusion.NullObjects.NullMemoryLocker">
            <summary>
            An implementation of <see cref="T:ZiggyCreatures.Caching.Fusion.Locking.IFusionCacheMemoryLocker"/> that implements the null object pattern, meaning that it does nothing. Consider this a kind of a pass-through implementation.
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.NullObjects.NullMemoryLocker.AcquireLock(System.String,System.String,System.String,System.String,System.TimeSpan,Microsoft.Extensions.Logging.ILogger,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.NullObjects.NullMemoryLocker.AcquireLockAsync(System.String,System.String,System.String,System.String,System.TimeSpan,Microsoft.Extensions.Logging.ILogger,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.NullObjects.NullMemoryLocker.ReleaseLock(System.String,System.String,System.String,System.String,System.Object,Microsoft.Extensions.Logging.ILogger)">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.NullObjects.NullMemoryLocker.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:ZiggyCreatures.Caching.Fusion.NullObjects.NullPlugin">
            <summary>
            An implementation of <see cref="T:ZiggyCreatures.Caching.Fusion.Plugins.IFusionCachePlugin"/> that implements the null object pattern, meaning that it does nothing.
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.NullObjects.NullPlugin.Start(ZiggyCreatures.Caching.Fusion.IFusionCache)">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.NullObjects.NullPlugin.Stop(ZiggyCreatures.Caching.Fusion.IFusionCache)">
            <inheritdoc/>
        </member>
        <member name="T:ZiggyCreatures.Caching.Fusion.NullObjects.NullSerializer">
            <summary>
            An implementation of <see cref="T:ZiggyCreatures.Caching.Fusion.Serialization.IFusionCacheSerializer"/> that implements the null object pattern, meaning that it does nothing.
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.NullObjects.NullSerializer.Deserialize``1(System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.NullObjects.NullSerializer.DeserializeAsync``1(System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.NullObjects.NullSerializer.Serialize``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.NullObjects.NullSerializer.SerializeAsync``1(``0)">
            <inheritdoc/>
        </member>
        <member name="T:ZiggyCreatures.Caching.Fusion.Plugins.IFusionCachePlugin">
            <summary>
            The core plugin interface to implement to create a FusionCache plugin.
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Plugins.IFusionCachePlugin.Start(ZiggyCreatures.Caching.Fusion.IFusionCache)">
            <summary>
            This method is called right after adding the plugin to a FusionCache instance. If it throws, the plugin will be automatically removed.
            </summary>
            <param name="cache">The FusionCache instance on which to operate.</param>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Plugins.IFusionCachePlugin.Stop(ZiggyCreatures.Caching.Fusion.IFusionCache)">
            <summary>
            This method is called right before removing the plugin from a FusionCache instance.
            </summary>
            <param name="cache">The FusionCache instance on which to operate.</param>
        </member>
        <member name="T:ZiggyCreatures.Caching.Fusion.Reactors.IFusionCacheReactor">
            <summary>
            Represents one of the core pieces of an instance of an <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCache"/>, dealing with acquiring and releasing locks in a highly optimized way.
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Reactors.IFusionCacheReactor.AcquireLockAsync(System.String,System.String,System.String,System.String,System.TimeSpan,Microsoft.Extensions.Logging.ILogger,System.Threading.CancellationToken)">
            <summary>
            Acquire a generic lock, used to synchronize multiple factory operating on the same cache key, and return it.
            </summary>
            <param name="cacheName">The CacheName of the FusionCache instance.</param>
            <param name="cacheInstanceId">The InstanceId of the FusionCache instance.</param>
            <param name="key">The key for which to obtain a lock.</param>
            <param name="operationId">The operation id which uniquely identifies a high-level cache operation.</param>
            <param name="timeout">The optional timeout for the lock acquisition.</param>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> to use, if any.</param>
            <returns>The acquired generic lock object, later released when the critical section is over.</returns>
            <param name="token">An optional <see cref="T:System.Threading.CancellationToken"/> to cancel the operation.</param>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Reactors.IFusionCacheReactor.AcquireLock(System.String,System.String,System.String,System.String,System.TimeSpan,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Acquire a generic lock, used to synchronize multiple factory operating on the same cache key, and return it.
            </summary>
            <param name="cacheName">The name of the FusionCache instance.</param>
            <param name="cacheInstanceId">The InstanceId of the FusionCache instance.</param>
            <param name="key">The key for which to obtain a lock.</param>
            <param name="operationId">The operation id which uniquely identifies a high-level cache operation.</param>
            <param name="timeout">The optional timeout for the lock acquisition.</param>
            <returns>The acquired generic lock object, later released when the critical section is over.</returns>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> to use, if any.</param>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Reactors.IFusionCacheReactor.ReleaseLock(System.String,System.String,System.String,System.String,System.Object,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Release the generic lock object.
            </summary>
            <param name="cacheName">The name of the FusionCache instance.</param>
            <param name="cacheInstanceId">The InstanceId of the FusionCache instance.</param>
            <param name="key">The key for which to obtain a lock.</param>
            <param name="operationId">The operation id which uniquely identifies a high-level cache operation.</param>
            <param name="lockObj">The generic lock object to release.</param>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> to use, if any.</param>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.Reactors.IFusionCacheReactor.Collisions">
            <summary>
            Exposes the eventual amount of collisions happened inside the reactor, for diagnostics purposes.
            </summary>
        </member>
        <member name="T:ZiggyCreatures.Caching.Fusion.Serialization.IFusionCacheSerializer">
            <summary>
            A generic serializer that converts any object instance to and from byte[], used along the <see cref="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache"/> .
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Serialization.IFusionCacheSerializer.Serialize``1(``0)">
            <summary>
            Serialized the specified <paramref name="obj"/> into a byte[].
            </summary>
            <typeparam name="T">The type of the <paramref name="obj"/> parameter.</typeparam>
            <param name="obj"></param>
            <returns>The byte[] which represents the serialized <paramref name="obj"/>.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Serialization.IFusionCacheSerializer.Deserialize``1(System.Byte[])">
            <summary>
            Deserialized the specified byte[] <paramref name="data"/> into an object of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of the object to be returned.</typeparam>
            <param name="data"></param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Serialization.IFusionCacheSerializer.SerializeAsync``1(``0)">
            <summary>
            Serialized the specified <paramref name="obj"/> into a byte[].
            </summary>
            <typeparam name="T">The type of the <paramref name="obj"/> parameter.</typeparam>
            <param name="obj"></param>
            <returns>The byte[] which represents the serialized <paramref name="obj"/>.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Serialization.IFusionCacheSerializer.DeserializeAsync``1(System.Byte[])">
            <summary>
            Deserialized the specified byte[] <paramref name="data"/> into an object of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of the object to be returned.</typeparam>
            <param name="data"></param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="T:ZiggyCreatures.Caching.Fusion.SyntheticTimeoutException">
            <summary>
            The exception that is thrown when the time allotted for a process or operation has expired.
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.SyntheticTimeoutException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ZiggyCreatures.Caching.Fusion.SyntheticTimeoutException"/> class.
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.SyntheticTimeoutException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:ZiggyCreatures.Caching.Fusion.SyntheticTimeoutException"/> class with the specified error message.</summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.SyntheticTimeoutException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:ZiggyCreatures.Caching.Fusion.SyntheticTimeoutException"/> class with the specified error message and inner exception.</summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not null, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.SyntheticTimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:ZiggyCreatures.Caching.Fusion.SyntheticTimeoutException"/> class with serialized data.</summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object that contains serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> object that contains contextual information about the source or destination. The context parameter is reserved for future use, and can be specified as null.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info">info</paramref> parameter is null.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null, or <see cref="P:System.Exception.HResult"/> is zero (0).</exception>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.FusionCacheServiceCollectionExtensions">
            <summary>
            Extension methods for setting up FusionCache related services in an <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.FusionCacheServiceCollectionExtensions.AddFusionCache(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{ZiggyCreatures.Caching.Fusion.FusionCacheOptions},System.Boolean,System.Boolean,System.Action{System.IServiceProvider,ZiggyCreatures.Caching.Fusion.IFusionCache})">
            <summary>
            !!! OBSOLETE !!!
            <br/><br/>
            This will be removed in a future release: please use the version of this method that uses the more common and robust Builder approach.
            <br/><br/>
            The new call corresponding to the old <c>AddFusionCache()</c> (that did some auto-setup) is <c>AddFusionCache().TryWithAutoSetup()</c>, see the docs for more.
            <br/><br/>
            Adds the standard implementation of <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCache"/> to the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/DependencyInjection.md"/>
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
            <param name="setupOptionsAction">The <see cref="T:System.Action`1"/> to configure the provided <see cref="T:ZiggyCreatures.Caching.Fusion.FusionCacheOptions"/>.</param>
            <param name="useDistributedCacheIfAvailable">Automatically wires up an <see cref="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache"/> if it has been registered in the Dependendy Injection container </param>
            <param name="ignoreMemoryDistributedCache">If the registered <see cref="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache"/> found is an instance of <see cref="T:Microsoft.Extensions.Caching.Distributed.MemoryDistributedCache"/> (typical when using asp.net) it will be ignored, since it is completely useless (and will consume cpu and memory).</param>
            <param name="setupCacheAction">The <see cref="T:System.Action`2"/> to configure the newly created <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCache"/> instance.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.FusionCacheServiceCollectionExtensions.AddFusionCache(Microsoft.Extensions.DependencyInjection.IServiceCollection,ZiggyCreatures.Caching.Fusion.IFusionCache)">
            <summary>
            Adds a custom instance of <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCache"/> to the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/DependencyInjection.md"/>
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
            <param name="cache">The custom FusionCache instance.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.FusionCacheServiceCollectionExtensions.AddFusionCache(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String)">
            <summary>
            Registers a named cache to the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            <br/><br/>
            <strong>NOTE: </strong> by registering a named cache in this way it's not possible to then change the CacheName in any other way, including usage of the WithOptions(...) method.
            <br/><br/>
            <strong>NOTE: </strong> by using this method, no default logic is applied: to automatically use all the available registered components please call the WithAutoSetup() method.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/DependencyInjection.md"/>
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
            <param name="cacheName">The name of the cache. It also automatically sets <see cref="P:ZiggyCreatures.Caching.Fusion.FusionCacheOptions.CacheName"/>.</param>
            <returns>The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.FusionCacheServiceCollectionExtensions.AddFusionCache(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Registers the default cache (not a named cache) to the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            <br/><br/>
            <strong>NOTE: </strong> by registering the default cache it's not possible to then change the CacheName in any other way, including usage of the WithOptions(...) method. If you want to register a named cache please use the AddFusionCache("MyCache") method instead.
            <br/><br/>
            <strong>NOTE: </strong> by using this method, no default logic is applied: to automatically use all the available registered components please call the WithAutoSetup() method.
            <br/><br/>
            <strong>DOCS:</strong> <see href="https://github.com/ZiggyCreatures/FusionCache/blob/main/docs/DependencyInjection.md"/>
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
            <returns>The <see cref="T:ZiggyCreatures.Caching.Fusion.IFusionCacheBuilder"/> so that additional calls can be chained.</returns>
        </member>
    </members>
</doc>
