<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ZiggyCreatures.FusionCache.Chaos</name>
    </assembly>
    <members>
        <member name="T:ZiggyCreatures.Caching.Fusion.Chaos.ChaosBackplane">
            <summary>
            An implementation of <see cref="T:ZiggyCreatures.Caching.Fusion.Backplane.IFusionCacheBackplane"/> that acts on behalf of another one, but with a (controllable) amount of chaos in-between.
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Chaos.ChaosBackplane.#ctor(ZiggyCreatures.Caching.Fusion.Backplane.IFusionCacheBackplane,Microsoft.Extensions.Logging.ILogger{ZiggyCreatures.Caching.Fusion.Chaos.ChaosBackplane})">
            <summary>
            Initializes a new instance of the ChaosBackplane class.
            </summary>
            <param name="innerBackplane">The actual <see cref="T:ZiggyCreatures.Caching.Fusion.Backplane.IFusionCacheBackplane"/> used if and when chaos does not happen.</param>
            <param name="logger">The logger to use, or <see langword="null"/>.</param>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Chaos.ChaosBackplane.Publish(ZiggyCreatures.Caching.Fusion.Backplane.BackplaneMessage,ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Chaos.ChaosBackplane.PublishAsync(ZiggyCreatures.Caching.Fusion.Backplane.BackplaneMessage,ZiggyCreatures.Caching.Fusion.FusionCacheEntryOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Chaos.ChaosBackplane.Subscribe(ZiggyCreatures.Caching.Fusion.Backplane.BackplaneSubscriptionOptions)">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Chaos.ChaosBackplane.Unsubscribe">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Chaos.ChaosBackplane.SetNeverThrow">
            <inheritdoc/>
        </member>
        <member name="T:ZiggyCreatures.Caching.Fusion.Chaos.ChaosDistributedCache">
            <summary>
            An implementation of <see cref="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache"/> that acts on behalf of another one, but with a (controllable) amount of chaos in-between.
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Chaos.ChaosDistributedCache.#ctor(Microsoft.Extensions.Caching.Distributed.IDistributedCache,Microsoft.Extensions.Logging.ILogger{ZiggyCreatures.Caching.Fusion.Chaos.ChaosDistributedCache})">
            <summary>
            Initializes a new instance of the ChaosDistributedCache class.
            </summary>
            <param name="innerCache">The actual <see cref="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache"/> used if and when chaos does not happen.</param>
            <param name="logger">The logger to use, or <see langword="null"/>.</param>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Chaos.ChaosDistributedCache.Get(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Chaos.ChaosDistributedCache.GetAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Chaos.ChaosDistributedCache.Refresh(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Chaos.ChaosDistributedCache.RefreshAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Chaos.ChaosDistributedCache.Remove(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Chaos.ChaosDistributedCache.RemoveAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Chaos.ChaosDistributedCache.Set(System.String,System.Byte[],Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions)">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Chaos.ChaosDistributedCache.SetAsync(System.String,System.Byte[],Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:ZiggyCreatures.Caching.Fusion.Chaos.ChaosException">
            <summary>
            The exception that is thrown when a method call should fail because of a randomized chaos event.
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Chaos.ChaosException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ZiggyCreatures.Caching.Fusion.Chaos.ChaosException"/> class.
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Chaos.ChaosException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:ZiggyCreatures.Caching.Fusion.Chaos.ChaosException"/> class with a specified error message.</summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Chaos.ChaosException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:ZiggyCreatures.Caching.Fusion.Chaos.ChaosException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Chaos.ChaosException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:ZiggyCreatures.Caching.Fusion.Chaos.ChaosException"/> class with serialized data.</summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:ZiggyCreatures.Caching.Fusion.Chaos.ChaosPlugin">
            <summary>
            An implementation of <see cref="T:ZiggyCreatures.Caching.Fusion.Plugins.IFusionCachePlugin"/> with a (controllable) amount of chaos in-between.
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Chaos.ChaosPlugin.#ctor(ZiggyCreatures.Caching.Fusion.Plugins.IFusionCachePlugin,Microsoft.Extensions.Logging.ILogger{ZiggyCreatures.Caching.Fusion.Chaos.ChaosPlugin})">
            <summary>
            Initializes a new instance of the ChaosPlugin class.
            </summary>
            <param name="innerPlugin">The actual <see cref="T:ZiggyCreatures.Caching.Fusion.Plugins.IFusionCachePlugin"/> used if and when chaos does not happen.</param>
            <param name="logger">The logger to use, or <see langword="null"/>.</param>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Chaos.ChaosPlugin.Start(ZiggyCreatures.Caching.Fusion.IFusionCache)">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Chaos.ChaosPlugin.Stop(ZiggyCreatures.Caching.Fusion.IFusionCache)">
            <inheritdoc/>
        </member>
        <member name="T:ZiggyCreatures.Caching.Fusion.Chaos.ChaosSerializer">
            <summary>
            An implementation of <see cref="T:ZiggyCreatures.Caching.Fusion.Serialization.IFusionCacheSerializer"/> that acts on behalf of another one, but with a (controllable) amount of chaos in-between.
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Chaos.ChaosSerializer.#ctor(ZiggyCreatures.Caching.Fusion.Serialization.IFusionCacheSerializer,Microsoft.Extensions.Logging.ILogger{ZiggyCreatures.Caching.Fusion.Chaos.ChaosSerializer})">
            <summary>
            Initializes a new instance of the ChaosSerializer class.
            </summary>
            <param name="innerSerializer">The actual <see cref="T:ZiggyCreatures.Caching.Fusion.Serialization.IFusionCacheSerializer"/> used if and when chaos does not happen.</param>
            <param name="logger">The logger to use, or <see langword="null"/>.</param>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Chaos.ChaosSerializer.Deserialize``1(System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Chaos.ChaosSerializer.DeserializeAsync``1(System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Chaos.ChaosSerializer.Serialize``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Chaos.ChaosSerializer.SerializeAsync``1(``0)">
            <inheritdoc/>
        </member>
        <member name="T:ZiggyCreatures.Caching.Fusion.Chaos.FusionCacheChaosUtils">
            <summary>
            Various utils to work with randomized controllable chaos.
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Chaos.FusionCacheChaosUtils.ShouldThrow(System.Single)">
            <summary>
            Determines if an exception should be thrown.
            </summary>
            <param name="throwProbability">The probabilty that an exception will be thrown.</param>
            <returns><see langword="true"/> if an exception should be thrown, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Chaos.FusionCacheChaosUtils.MaybeThrow(System.Single)">
            <summary>
            Maybe throw a <see cref="T:ZiggyCreatures.Caching.Fusion.Chaos.ChaosException"/> based on the specified probabilty.
            </summary>
            <param name="throwProbability">The probabilty that an exception will be thrown.</param>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Chaos.FusionCacheChaosUtils.GetRandomDelay(System.TimeSpan,System.TimeSpan)">
            <summary>
            Randomize an actual delay with a value between <paramref name="minDelay"/> and <paramref name="maxDelay"/>.
            </summary>
            <param name="minDelay">The minimun amount of delay.</param>
            <param name="maxDelay">The maximum amount of delay.</param>
            <returns>The randomized delay.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Chaos.FusionCacheChaosUtils.MaybeDelay(System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Randomize an actual delay with a value between <paramref name="minDelay"/> and <paramref name="maxDelay"/>, and waits for it.
            </summary>
            <param name="minDelay">The minimun amount of delay.</param>
            <param name="maxDelay">The maximum amount of delay.</param>
            <param name="token">The cancellation token.</param>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Chaos.FusionCacheChaosUtils.MaybeDelayAsync(System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Randomize an actual delay with a value between <paramref name="minDelay"/> and <paramref name="maxDelay"/>, and waits for it.
            </summary>
            <param name="minDelay">The minimun amount of delay.</param>
            <param name="maxDelay">The maximum amount of delay.</param>
            <param name="token">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> instance to await.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Chaos.FusionCacheChaosUtils.MaybeChaos(System.TimeSpan,System.TimeSpan,System.Single,System.Threading.CancellationToken)">
            <summary>
            Randomize an actual delay with a value between <paramref name="minDelay"/> and <paramref name="maxDelay"/>, and waits for it.
            Then, maybe, throw a <see cref="T:ZiggyCreatures.Caching.Fusion.Chaos.ChaosException"/> based on the specified probabilty.
            </summary>
            <param name="minDelay">The minimun amount of delay.</param>
            <param name="maxDelay">The maximum amount of delay.</param>
            <param name="throwProbability">The probabilty that an exception will be thrown.</param>
            <param name="token">The cancellation token.</param>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Chaos.FusionCacheChaosUtils.MaybeChaosAsync(System.TimeSpan,System.TimeSpan,System.Single,System.Threading.CancellationToken)">
            <summary>
            Randomize an actual delay with a value between <paramref name="minDelay"/> and <paramref name="maxDelay"/>, and waits for it.
            Then, maybe, throw a <see cref="T:ZiggyCreatures.Caching.Fusion.Chaos.ChaosException"/> based on the specified probabilty.
            </summary>
            <param name="minDelay">The minimun amount of delay.</param>
            <param name="maxDelay">The maximum amount of delay.</param>
            <param name="throwProbability">The probabilty that an exception will be thrown.</param>
            <param name="token">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> instance to await.</returns>
        </member>
        <member name="T:ZiggyCreatures.Caching.Fusion.Chaos.Internals.AbstractChaosComponent">
            <summary>
            A base implementation for a component with a controllable amount of chaos.
            </summary>
        </member>
        <member name="F:ZiggyCreatures.Caching.Fusion.Chaos.Internals.AbstractChaosComponent._logger">
            <summary>
            The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> to use, or <see langword="null"/> for no logging.
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Chaos.Internals.AbstractChaosComponent.#ctor(Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the AbstractChaosComponent class.
            </summary>
            <param name="logger">The logger to use, or <see langword="null"/>.</param>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.Chaos.Internals.AbstractChaosComponent.ChaosMaxDelay">
            <summary>
            The maximum amount of randomized delay.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.Chaos.Internals.AbstractChaosComponent.ChaosMinDelay">
            <summary>
            The minimum amount of randomized delay.
            </summary>
        </member>
        <member name="P:ZiggyCreatures.Caching.Fusion.Chaos.Internals.AbstractChaosComponent.ChaosThrowProbability">
            <summary>
            A <see cref="T:System.Single"/> value from 0.0 to 1.0 that represents the probabilty of throwing an exception: set it to 0.0 to never throw or to 1.0 to always throw.
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Chaos.Internals.AbstractChaosComponent.SetAlwaysDelay(System.TimeSpan,System.TimeSpan)">
            <summary>
            Force chaos delays to always be between certain amounts.
            </summary>
            <param name="minDelay">The minimum amount of delay.</param>
            <param name="maxDelay">The maximum amount of delay.</param>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Chaos.Internals.AbstractChaosComponent.SetAlwaysDelayExactly(System.TimeSpan)">
            <summary>
            Force chaos delays to always be of exactly this amount.
            </summary>
            <param name="delay">The amount of delay.</param>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Chaos.Internals.AbstractChaosComponent.SetAlwaysThrow">
            <summary>
            Force chaos exceptions to always be thrown.
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Chaos.Internals.AbstractChaosComponent.SetAlwaysChaos(System.TimeSpan)">
            <summary>
            Force chaos exceptions to always throw, and chaos delays to always be of exactly this amount.
            </summary>
            <param name="delay">The amount of delay.</param>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Chaos.Internals.AbstractChaosComponent.SetAlwaysChaos(System.TimeSpan,System.TimeSpan)">
            <summary>
            Force chaos exceptions to always throw, and chaos delays to always be between certain amounts.
            </summary>
            <param name="minDelay">The minimum amount of delay.</param>
            <param name="maxDelay">The maximum amount of delay.</param>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Chaos.Internals.AbstractChaosComponent.SetNeverChaos">
            <summary>
            Force chaos exceptions and delays to never happen.
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Chaos.Internals.AbstractChaosComponent.SetNeverDelay">
            <summary>
            Force chaos delays to never happen.
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Chaos.Internals.AbstractChaosComponent.SetNeverThrow">
            <summary>
            Force chaos exceptions to never be thrown.
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Chaos.Internals.AbstractChaosComponent.ShouldThrow">
            <summary>
            Determines if an exception should be thrown.
            </summary>
            <returns><see langword="true"/> if an exception should be thrown, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Chaos.Internals.AbstractChaosComponent.MaybeChaos(System.Threading.CancellationToken)">
            <summary>
            Randomize an actual delay with a value between the configured min/max values, and if needed waits for it.
            Then, maybe, throw a <see cref="T:ZiggyCreatures.Caching.Fusion.Chaos.ChaosException"/> based on the specified probabilty.
            </summary>
        </member>
        <member name="M:ZiggyCreatures.Caching.Fusion.Chaos.Internals.AbstractChaosComponent.MaybeChaosAsync(System.Threading.CancellationToken)">
            <summary>
            Randomize an actual delay with a value between the configured min/max values, and if needed waits for it.
            Then, maybe, throw a <see cref="T:ZiggyCreatures.Caching.Fusion.Chaos.ChaosException"/> based on the specified probabilty.
            </summary>
        </member>
    </members>
</doc>
